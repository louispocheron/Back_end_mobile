
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model action
 * 
 */
export type action = {
  id: number
  ville_depart: string
  ville_arrive: string
  km: number
  raisons: string
  heure_depart: Date | null
  heure_arrivee: Date | null
  date: Date
  user_id: number
  association_id: number | null
  duree: string | null
  frais: number | null
  created_at: Date | null
  frais_kilometrique: Prisma.Decimal | null
  charges: string
  groupe: string
  dons: string | null
  heures_valorisees: string | null
  a_payer: string | null
}

/**
 * Model associations
 * 
 */
export type associations = {
  id: number
  name: string
  logo: string | null
  description: string | null
  user_id: number | null
  numero_siret: string
  region: string | null
}

/**
 * Model doctrine_migration_versions
 * 
 */
export type doctrine_migration_versions = {
  version: string
  executed_at: Date | null
  execution_time: number | null
}

/**
 * Model messenger_messages
 * 
 */
export type messenger_messages = {
  id: bigint
  body: string
  headers: string
  queue_name: string
  created_at: Date
  available_at: Date
  delivered_at: Date | null
}

/**
 * Model reset_password_request
 * 
 */
export type reset_password_request = {
  id: number
  user_id: number
  selector: string
  hashed_token: string
  requested_at: Date
  expires_at: Date
}

/**
 * Model user
 * 
 */
export type user = {
  id: number
  username: string
  roles: Prisma.JsonValue
  password: string
  email: string | null
  profil_picture: string | null
}

/**
 * Model user_associations
 * 
 */
export type user_associations = {
  user_id: number
  associations_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Actions
 * const actions = await prisma.action.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Actions
   * const actions = await prisma.action.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.action`: Exposes CRUD operations for the **action** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Actions
    * const actions = await prisma.action.findMany()
    * ```
    */
  get action(): Prisma.actionDelegate<GlobalReject>;

  /**
   * `prisma.associations`: Exposes CRUD operations for the **associations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Associations
    * const associations = await prisma.associations.findMany()
    * ```
    */
  get associations(): Prisma.associationsDelegate<GlobalReject>;

  /**
   * `prisma.doctrine_migration_versions`: Exposes CRUD operations for the **doctrine_migration_versions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctrine_migration_versions
    * const doctrine_migration_versions = await prisma.doctrine_migration_versions.findMany()
    * ```
    */
  get doctrine_migration_versions(): Prisma.doctrine_migration_versionsDelegate<GlobalReject>;

  /**
   * `prisma.messenger_messages`: Exposes CRUD operations for the **messenger_messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messenger_messages
    * const messenger_messages = await prisma.messenger_messages.findMany()
    * ```
    */
  get messenger_messages(): Prisma.messenger_messagesDelegate<GlobalReject>;

  /**
   * `prisma.reset_password_request`: Exposes CRUD operations for the **reset_password_request** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reset_password_requests
    * const reset_password_requests = await prisma.reset_password_request.findMany()
    * ```
    */
  get reset_password_request(): Prisma.reset_password_requestDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.user_associations`: Exposes CRUD operations for the **user_associations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_associations
    * const user_associations = await prisma.user_associations.findMany()
    * ```
    */
  get user_associations(): Prisma.user_associationsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    action: 'action',
    associations: 'associations',
    doctrine_migration_versions: 'doctrine_migration_versions',
    messenger_messages: 'messenger_messages',
    reset_password_request: 'reset_password_request',
    user: 'user',
    user_associations: 'user_associations'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AssociationsCountOutputType
   */


  export type AssociationsCountOutputType = {
    action: number
    user_associations: number
  }

  export type AssociationsCountOutputTypeSelect = {
    action?: boolean
    user_associations?: boolean
  }

  export type AssociationsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AssociationsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AssociationsCountOutputType
    : S extends undefined
    ? never
    : S extends AssociationsCountOutputTypeArgs
    ?'include' extends U
    ? AssociationsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AssociationsCountOutputType ? AssociationsCountOutputType[P] : never
  } 
    : AssociationsCountOutputType
  : AssociationsCountOutputType




  // Custom InputTypes

  /**
   * AssociationsCountOutputType without action
   */
  export type AssociationsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AssociationsCountOutputType
     * 
    **/
    select?: AssociationsCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    action: number
    associations: number
    reset_password_request: number
    user_associations: number
  }

  export type UserCountOutputTypeSelect = {
    action?: boolean
    associations?: boolean
    reset_password_request?: boolean
    user_associations?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model action
   */


  export type AggregateAction = {
    _count: ActionCountAggregateOutputType | null
    _avg: ActionAvgAggregateOutputType | null
    _sum: ActionSumAggregateOutputType | null
    _min: ActionMinAggregateOutputType | null
    _max: ActionMaxAggregateOutputType | null
  }

  export type ActionAvgAggregateOutputType = {
    id: number | null
    km: number | null
    user_id: number | null
    association_id: number | null
    frais: number | null
    frais_kilometrique: Decimal | null
  }

  export type ActionSumAggregateOutputType = {
    id: number | null
    km: number | null
    user_id: number | null
    association_id: number | null
    frais: number | null
    frais_kilometrique: Decimal | null
  }

  export type ActionMinAggregateOutputType = {
    id: number | null
    ville_depart: string | null
    ville_arrive: string | null
    km: number | null
    raisons: string | null
    heure_depart: Date | null
    heure_arrivee: Date | null
    date: Date | null
    user_id: number | null
    association_id: number | null
    duree: string | null
    frais: number | null
    created_at: Date | null
    frais_kilometrique: Decimal | null
    charges: string | null
    groupe: string | null
    dons: string | null
    heures_valorisees: string | null
    a_payer: string | null
  }

  export type ActionMaxAggregateOutputType = {
    id: number | null
    ville_depart: string | null
    ville_arrive: string | null
    km: number | null
    raisons: string | null
    heure_depart: Date | null
    heure_arrivee: Date | null
    date: Date | null
    user_id: number | null
    association_id: number | null
    duree: string | null
    frais: number | null
    created_at: Date | null
    frais_kilometrique: Decimal | null
    charges: string | null
    groupe: string | null
    dons: string | null
    heures_valorisees: string | null
    a_payer: string | null
  }

  export type ActionCountAggregateOutputType = {
    id: number
    ville_depart: number
    ville_arrive: number
    km: number
    raisons: number
    heure_depart: number
    heure_arrivee: number
    date: number
    user_id: number
    association_id: number
    duree: number
    frais: number
    created_at: number
    frais_kilometrique: number
    charges: number
    groupe: number
    dons: number
    heures_valorisees: number
    a_payer: number
    _all: number
  }


  export type ActionAvgAggregateInputType = {
    id?: true
    km?: true
    user_id?: true
    association_id?: true
    frais?: true
    frais_kilometrique?: true
  }

  export type ActionSumAggregateInputType = {
    id?: true
    km?: true
    user_id?: true
    association_id?: true
    frais?: true
    frais_kilometrique?: true
  }

  export type ActionMinAggregateInputType = {
    id?: true
    ville_depart?: true
    ville_arrive?: true
    km?: true
    raisons?: true
    heure_depart?: true
    heure_arrivee?: true
    date?: true
    user_id?: true
    association_id?: true
    duree?: true
    frais?: true
    created_at?: true
    frais_kilometrique?: true
    charges?: true
    groupe?: true
    dons?: true
    heures_valorisees?: true
    a_payer?: true
  }

  export type ActionMaxAggregateInputType = {
    id?: true
    ville_depart?: true
    ville_arrive?: true
    km?: true
    raisons?: true
    heure_depart?: true
    heure_arrivee?: true
    date?: true
    user_id?: true
    association_id?: true
    duree?: true
    frais?: true
    created_at?: true
    frais_kilometrique?: true
    charges?: true
    groupe?: true
    dons?: true
    heures_valorisees?: true
    a_payer?: true
  }

  export type ActionCountAggregateInputType = {
    id?: true
    ville_depart?: true
    ville_arrive?: true
    km?: true
    raisons?: true
    heure_depart?: true
    heure_arrivee?: true
    date?: true
    user_id?: true
    association_id?: true
    duree?: true
    frais?: true
    created_at?: true
    frais_kilometrique?: true
    charges?: true
    groupe?: true
    dons?: true
    heures_valorisees?: true
    a_payer?: true
    _all?: true
  }

  export type ActionAggregateArgs = {
    /**
     * Filter which action to aggregate.
     * 
    **/
    where?: actionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of actions to fetch.
     * 
    **/
    orderBy?: Enumerable<actionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: actionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` actions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` actions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned actions
    **/
    _count?: true | ActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionMaxAggregateInputType
  }

  export type GetActionAggregateType<T extends ActionAggregateArgs> = {
        [P in keyof T & keyof AggregateAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAction[P]>
      : GetScalarType<T[P], AggregateAction[P]>
  }




  export type ActionGroupByArgs = {
    where?: actionWhereInput
    orderBy?: Enumerable<actionOrderByWithAggregationInput>
    by: Array<ActionScalarFieldEnum>
    having?: actionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionCountAggregateInputType | true
    _avg?: ActionAvgAggregateInputType
    _sum?: ActionSumAggregateInputType
    _min?: ActionMinAggregateInputType
    _max?: ActionMaxAggregateInputType
  }


  export type ActionGroupByOutputType = {
    id: number
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart: Date | null
    heure_arrivee: Date | null
    date: Date
    user_id: number
    association_id: number | null
    duree: string | null
    frais: number | null
    created_at: Date | null
    frais_kilometrique: Decimal | null
    charges: string
    groupe: string
    dons: string | null
    heures_valorisees: string | null
    a_payer: string | null
    _count: ActionCountAggregateOutputType | null
    _avg: ActionAvgAggregateOutputType | null
    _sum: ActionSumAggregateOutputType | null
    _min: ActionMinAggregateOutputType | null
    _max: ActionMaxAggregateOutputType | null
  }

  type GetActionGroupByPayload<T extends ActionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionGroupByOutputType[P]>
            : GetScalarType<T[P], ActionGroupByOutputType[P]>
        }
      >
    >


  export type actionSelect = {
    id?: boolean
    ville_depart?: boolean
    ville_arrive?: boolean
    km?: boolean
    raisons?: boolean
    heure_depart?: boolean
    heure_arrivee?: boolean
    date?: boolean
    user_id?: boolean
    association_id?: boolean
    duree?: boolean
    frais?: boolean
    created_at?: boolean
    frais_kilometrique?: boolean
    charges?: boolean
    groupe?: boolean
    dons?: boolean
    heures_valorisees?: boolean
    a_payer?: boolean
    user?: boolean | userArgs
    associations?: boolean | associationsArgs
  }

  export type actionInclude = {
    user?: boolean | userArgs
    associations?: boolean | associationsArgs
  }

  export type actionGetPayload<
    S extends boolean | null | undefined | actionArgs,
    U = keyof S
      > = S extends true
        ? action
    : S extends undefined
    ? never
    : S extends actionArgs | actionFindManyArgs
    ?'include' extends U
    ? action  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'associations' ? associationsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'associations' ? associationsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof action ? action[P] : never
  } 
    : action
  : action


  type actionCountArgs = Merge<
    Omit<actionFindManyArgs, 'select' | 'include'> & {
      select?: ActionCountAggregateInputType | true
    }
  >

  export interface actionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Action that matches the filter.
     * @param {actionFindUniqueArgs} args - Arguments to find a Action
     * @example
     * // Get one Action
     * const action = await prisma.action.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends actionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, actionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'action'> extends True ? CheckSelect<T, Prisma__actionClient<action>, Prisma__actionClient<actionGetPayload<T>>> : CheckSelect<T, Prisma__actionClient<action | null, null>, Prisma__actionClient<actionGetPayload<T> | null, null>>

    /**
     * Find the first Action that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actionFindFirstArgs} args - Arguments to find a Action
     * @example
     * // Get one Action
     * const action = await prisma.action.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends actionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, actionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'action'> extends True ? CheckSelect<T, Prisma__actionClient<action>, Prisma__actionClient<actionGetPayload<T>>> : CheckSelect<T, Prisma__actionClient<action | null, null>, Prisma__actionClient<actionGetPayload<T> | null, null>>

    /**
     * Find zero or more Actions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Actions
     * const actions = await prisma.action.findMany()
     * 
     * // Get first 10 Actions
     * const actions = await prisma.action.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionWithIdOnly = await prisma.action.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends actionFindManyArgs>(
      args?: SelectSubset<T, actionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<action>>, PrismaPromise<Array<actionGetPayload<T>>>>

    /**
     * Create a Action.
     * @param {actionCreateArgs} args - Arguments to create a Action.
     * @example
     * // Create one Action
     * const Action = await prisma.action.create({
     *   data: {
     *     // ... data to create a Action
     *   }
     * })
     * 
    **/
    create<T extends actionCreateArgs>(
      args: SelectSubset<T, actionCreateArgs>
    ): CheckSelect<T, Prisma__actionClient<action>, Prisma__actionClient<actionGetPayload<T>>>

    /**
     * Create many Actions.
     *     @param {actionCreateManyArgs} args - Arguments to create many Actions.
     *     @example
     *     // Create many Actions
     *     const action = await prisma.action.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends actionCreateManyArgs>(
      args?: SelectSubset<T, actionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Action.
     * @param {actionDeleteArgs} args - Arguments to delete one Action.
     * @example
     * // Delete one Action
     * const Action = await prisma.action.delete({
     *   where: {
     *     // ... filter to delete one Action
     *   }
     * })
     * 
    **/
    delete<T extends actionDeleteArgs>(
      args: SelectSubset<T, actionDeleteArgs>
    ): CheckSelect<T, Prisma__actionClient<action>, Prisma__actionClient<actionGetPayload<T>>>

    /**
     * Update one Action.
     * @param {actionUpdateArgs} args - Arguments to update one Action.
     * @example
     * // Update one Action
     * const action = await prisma.action.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends actionUpdateArgs>(
      args: SelectSubset<T, actionUpdateArgs>
    ): CheckSelect<T, Prisma__actionClient<action>, Prisma__actionClient<actionGetPayload<T>>>

    /**
     * Delete zero or more Actions.
     * @param {actionDeleteManyArgs} args - Arguments to filter Actions to delete.
     * @example
     * // Delete a few Actions
     * const { count } = await prisma.action.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends actionDeleteManyArgs>(
      args?: SelectSubset<T, actionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Actions
     * const action = await prisma.action.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends actionUpdateManyArgs>(
      args: SelectSubset<T, actionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Action.
     * @param {actionUpsertArgs} args - Arguments to update or create a Action.
     * @example
     * // Update or create a Action
     * const action = await prisma.action.upsert({
     *   create: {
     *     // ... data to create a Action
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Action we want to update
     *   }
     * })
    **/
    upsert<T extends actionUpsertArgs>(
      args: SelectSubset<T, actionUpsertArgs>
    ): CheckSelect<T, Prisma__actionClient<action>, Prisma__actionClient<actionGetPayload<T>>>

    /**
     * Find one Action that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {actionFindUniqueOrThrowArgs} args - Arguments to find a Action
     * @example
     * // Get one Action
     * const action = await prisma.action.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends actionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, actionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__actionClient<action>, Prisma__actionClient<actionGetPayload<T>>>

    /**
     * Find the first Action that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actionFindFirstOrThrowArgs} args - Arguments to find a Action
     * @example
     * // Get one Action
     * const action = await prisma.action.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends actionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, actionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__actionClient<action>, Prisma__actionClient<actionGetPayload<T>>>

    /**
     * Count the number of Actions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actionCountArgs} args - Arguments to filter Actions to count.
     * @example
     * // Count the number of Actions
     * const count = await prisma.action.count({
     *   where: {
     *     // ... the filter for the Actions we want to count
     *   }
     * })
    **/
    count<T extends actionCountArgs>(
      args?: Subset<T, actionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Action.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionAggregateArgs>(args: Subset<T, ActionAggregateArgs>): PrismaPromise<GetActionAggregateType<T>>

    /**
     * Group by Action.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionGroupByArgs['orderBy'] }
        : { orderBy?: ActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for action.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__actionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    associations<T extends associationsArgs = {}>(args?: Subset<T, associationsArgs>): CheckSelect<T, Prisma__associationsClient<associations | Null>, Prisma__associationsClient<associationsGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * action base type for findUnique actions
   */
  export type actionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the action
     * 
    **/
    select?: actionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: actionInclude | null
    /**
     * Filter, which action to fetch.
     * 
    **/
    where: actionWhereUniqueInput
  }

  /**
   * action: findUnique
   */
  export interface actionFindUniqueArgs extends actionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * action base type for findFirst actions
   */
  export type actionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the action
     * 
    **/
    select?: actionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: actionInclude | null
    /**
     * Filter, which action to fetch.
     * 
    **/
    where?: actionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of actions to fetch.
     * 
    **/
    orderBy?: Enumerable<actionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for actions.
     * 
    **/
    cursor?: actionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` actions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` actions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of actions.
     * 
    **/
    distinct?: Enumerable<ActionScalarFieldEnum>
  }

  /**
   * action: findFirst
   */
  export interface actionFindFirstArgs extends actionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * action findMany
   */
  export type actionFindManyArgs = {
    /**
     * Select specific fields to fetch from the action
     * 
    **/
    select?: actionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: actionInclude | null
    /**
     * Filter, which actions to fetch.
     * 
    **/
    where?: actionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of actions to fetch.
     * 
    **/
    orderBy?: Enumerable<actionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing actions.
     * 
    **/
    cursor?: actionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` actions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` actions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ActionScalarFieldEnum>
  }


  /**
   * action create
   */
  export type actionCreateArgs = {
    /**
     * Select specific fields to fetch from the action
     * 
    **/
    select?: actionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: actionInclude | null
    /**
     * The data needed to create a action.
     * 
    **/
    data: XOR<actionCreateInput, actionUncheckedCreateInput>
  }


  /**
   * action createMany
   */
  export type actionCreateManyArgs = {
    /**
     * The data used to create many actions.
     * 
    **/
    data: Enumerable<actionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * action update
   */
  export type actionUpdateArgs = {
    /**
     * Select specific fields to fetch from the action
     * 
    **/
    select?: actionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: actionInclude | null
    /**
     * The data needed to update a action.
     * 
    **/
    data: XOR<actionUpdateInput, actionUncheckedUpdateInput>
    /**
     * Choose, which action to update.
     * 
    **/
    where: actionWhereUniqueInput
  }


  /**
   * action updateMany
   */
  export type actionUpdateManyArgs = {
    /**
     * The data used to update actions.
     * 
    **/
    data: XOR<actionUpdateManyMutationInput, actionUncheckedUpdateManyInput>
    /**
     * Filter which actions to update
     * 
    **/
    where?: actionWhereInput
  }


  /**
   * action upsert
   */
  export type actionUpsertArgs = {
    /**
     * Select specific fields to fetch from the action
     * 
    **/
    select?: actionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: actionInclude | null
    /**
     * The filter to search for the action to update in case it exists.
     * 
    **/
    where: actionWhereUniqueInput
    /**
     * In case the action found by the `where` argument doesn't exist, create a new action with this data.
     * 
    **/
    create: XOR<actionCreateInput, actionUncheckedCreateInput>
    /**
     * In case the action was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<actionUpdateInput, actionUncheckedUpdateInput>
  }


  /**
   * action delete
   */
  export type actionDeleteArgs = {
    /**
     * Select specific fields to fetch from the action
     * 
    **/
    select?: actionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: actionInclude | null
    /**
     * Filter which action to delete.
     * 
    **/
    where: actionWhereUniqueInput
  }


  /**
   * action deleteMany
   */
  export type actionDeleteManyArgs = {
    /**
     * Filter which actions to delete
     * 
    **/
    where?: actionWhereInput
  }


  /**
   * action: findUniqueOrThrow
   */
  export type actionFindUniqueOrThrowArgs = actionFindUniqueArgsBase
      

  /**
   * action: findFirstOrThrow
   */
  export type actionFindFirstOrThrowArgs = actionFindFirstArgsBase
      

  /**
   * action without action
   */
  export type actionArgs = {
    /**
     * Select specific fields to fetch from the action
     * 
    **/
    select?: actionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: actionInclude | null
  }



  /**
   * Model associations
   */


  export type AggregateAssociations = {
    _count: AssociationsCountAggregateOutputType | null
    _avg: AssociationsAvgAggregateOutputType | null
    _sum: AssociationsSumAggregateOutputType | null
    _min: AssociationsMinAggregateOutputType | null
    _max: AssociationsMaxAggregateOutputType | null
  }

  export type AssociationsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type AssociationsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type AssociationsMinAggregateOutputType = {
    id: number | null
    name: string | null
    logo: string | null
    description: string | null
    user_id: number | null
    numero_siret: string | null
    region: string | null
  }

  export type AssociationsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    logo: string | null
    description: string | null
    user_id: number | null
    numero_siret: string | null
    region: string | null
  }

  export type AssociationsCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    description: number
    user_id: number
    numero_siret: number
    region: number
    _all: number
  }


  export type AssociationsAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type AssociationsSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type AssociationsMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    description?: true
    user_id?: true
    numero_siret?: true
    region?: true
  }

  export type AssociationsMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    description?: true
    user_id?: true
    numero_siret?: true
    region?: true
  }

  export type AssociationsCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    description?: true
    user_id?: true
    numero_siret?: true
    region?: true
    _all?: true
  }

  export type AssociationsAggregateArgs = {
    /**
     * Filter which associations to aggregate.
     * 
    **/
    where?: associationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of associations to fetch.
     * 
    **/
    orderBy?: Enumerable<associationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: associationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` associations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` associations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned associations
    **/
    _count?: true | AssociationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssociationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssociationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssociationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssociationsMaxAggregateInputType
  }

  export type GetAssociationsAggregateType<T extends AssociationsAggregateArgs> = {
        [P in keyof T & keyof AggregateAssociations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssociations[P]>
      : GetScalarType<T[P], AggregateAssociations[P]>
  }




  export type AssociationsGroupByArgs = {
    where?: associationsWhereInput
    orderBy?: Enumerable<associationsOrderByWithAggregationInput>
    by: Array<AssociationsScalarFieldEnum>
    having?: associationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssociationsCountAggregateInputType | true
    _avg?: AssociationsAvgAggregateInputType
    _sum?: AssociationsSumAggregateInputType
    _min?: AssociationsMinAggregateInputType
    _max?: AssociationsMaxAggregateInputType
  }


  export type AssociationsGroupByOutputType = {
    id: number
    name: string
    logo: string | null
    description: string | null
    user_id: number | null
    numero_siret: string
    region: string | null
    _count: AssociationsCountAggregateOutputType | null
    _avg: AssociationsAvgAggregateOutputType | null
    _sum: AssociationsSumAggregateOutputType | null
    _min: AssociationsMinAggregateOutputType | null
    _max: AssociationsMaxAggregateOutputType | null
  }

  type GetAssociationsGroupByPayload<T extends AssociationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AssociationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssociationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssociationsGroupByOutputType[P]>
            : GetScalarType<T[P], AssociationsGroupByOutputType[P]>
        }
      >
    >


  export type associationsSelect = {
    id?: boolean
    name?: boolean
    logo?: boolean
    description?: boolean
    user_id?: boolean
    numero_siret?: boolean
    region?: boolean
    user?: boolean | userArgs
    action?: boolean | actionFindManyArgs
    user_associations?: boolean | user_associationsFindManyArgs
    _count?: boolean | AssociationsCountOutputTypeArgs
  }

  export type associationsInclude = {
    user?: boolean | userArgs
    action?: boolean | actionFindManyArgs
    user_associations?: boolean | user_associationsFindManyArgs
    _count?: boolean | AssociationsCountOutputTypeArgs
  }

  export type associationsGetPayload<
    S extends boolean | null | undefined | associationsArgs,
    U = keyof S
      > = S extends true
        ? associations
    : S extends undefined
    ? never
    : S extends associationsArgs | associationsFindManyArgs
    ?'include' extends U
    ? associations  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'action' ? Array < actionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user_associations' ? Array < user_associationsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? AssociationsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'action' ? Array < actionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user_associations' ? Array < user_associationsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? AssociationsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof associations ? associations[P] : never
  } 
    : associations
  : associations


  type associationsCountArgs = Merge<
    Omit<associationsFindManyArgs, 'select' | 'include'> & {
      select?: AssociationsCountAggregateInputType | true
    }
  >

  export interface associationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Associations that matches the filter.
     * @param {associationsFindUniqueArgs} args - Arguments to find a Associations
     * @example
     * // Get one Associations
     * const associations = await prisma.associations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends associationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, associationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'associations'> extends True ? CheckSelect<T, Prisma__associationsClient<associations>, Prisma__associationsClient<associationsGetPayload<T>>> : CheckSelect<T, Prisma__associationsClient<associations | null, null>, Prisma__associationsClient<associationsGetPayload<T> | null, null>>

    /**
     * Find the first Associations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {associationsFindFirstArgs} args - Arguments to find a Associations
     * @example
     * // Get one Associations
     * const associations = await prisma.associations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends associationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, associationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'associations'> extends True ? CheckSelect<T, Prisma__associationsClient<associations>, Prisma__associationsClient<associationsGetPayload<T>>> : CheckSelect<T, Prisma__associationsClient<associations | null, null>, Prisma__associationsClient<associationsGetPayload<T> | null, null>>

    /**
     * Find zero or more Associations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {associationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Associations
     * const associations = await prisma.associations.findMany()
     * 
     * // Get first 10 Associations
     * const associations = await prisma.associations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const associationsWithIdOnly = await prisma.associations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends associationsFindManyArgs>(
      args?: SelectSubset<T, associationsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<associations>>, PrismaPromise<Array<associationsGetPayload<T>>>>

    /**
     * Create a Associations.
     * @param {associationsCreateArgs} args - Arguments to create a Associations.
     * @example
     * // Create one Associations
     * const Associations = await prisma.associations.create({
     *   data: {
     *     // ... data to create a Associations
     *   }
     * })
     * 
    **/
    create<T extends associationsCreateArgs>(
      args: SelectSubset<T, associationsCreateArgs>
    ): CheckSelect<T, Prisma__associationsClient<associations>, Prisma__associationsClient<associationsGetPayload<T>>>

    /**
     * Create many Associations.
     *     @param {associationsCreateManyArgs} args - Arguments to create many Associations.
     *     @example
     *     // Create many Associations
     *     const associations = await prisma.associations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends associationsCreateManyArgs>(
      args?: SelectSubset<T, associationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Associations.
     * @param {associationsDeleteArgs} args - Arguments to delete one Associations.
     * @example
     * // Delete one Associations
     * const Associations = await prisma.associations.delete({
     *   where: {
     *     // ... filter to delete one Associations
     *   }
     * })
     * 
    **/
    delete<T extends associationsDeleteArgs>(
      args: SelectSubset<T, associationsDeleteArgs>
    ): CheckSelect<T, Prisma__associationsClient<associations>, Prisma__associationsClient<associationsGetPayload<T>>>

    /**
     * Update one Associations.
     * @param {associationsUpdateArgs} args - Arguments to update one Associations.
     * @example
     * // Update one Associations
     * const associations = await prisma.associations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends associationsUpdateArgs>(
      args: SelectSubset<T, associationsUpdateArgs>
    ): CheckSelect<T, Prisma__associationsClient<associations>, Prisma__associationsClient<associationsGetPayload<T>>>

    /**
     * Delete zero or more Associations.
     * @param {associationsDeleteManyArgs} args - Arguments to filter Associations to delete.
     * @example
     * // Delete a few Associations
     * const { count } = await prisma.associations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends associationsDeleteManyArgs>(
      args?: SelectSubset<T, associationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Associations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {associationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Associations
     * const associations = await prisma.associations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends associationsUpdateManyArgs>(
      args: SelectSubset<T, associationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Associations.
     * @param {associationsUpsertArgs} args - Arguments to update or create a Associations.
     * @example
     * // Update or create a Associations
     * const associations = await prisma.associations.upsert({
     *   create: {
     *     // ... data to create a Associations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Associations we want to update
     *   }
     * })
    **/
    upsert<T extends associationsUpsertArgs>(
      args: SelectSubset<T, associationsUpsertArgs>
    ): CheckSelect<T, Prisma__associationsClient<associations>, Prisma__associationsClient<associationsGetPayload<T>>>

    /**
     * Find one Associations that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {associationsFindUniqueOrThrowArgs} args - Arguments to find a Associations
     * @example
     * // Get one Associations
     * const associations = await prisma.associations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends associationsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, associationsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__associationsClient<associations>, Prisma__associationsClient<associationsGetPayload<T>>>

    /**
     * Find the first Associations that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {associationsFindFirstOrThrowArgs} args - Arguments to find a Associations
     * @example
     * // Get one Associations
     * const associations = await prisma.associations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends associationsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, associationsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__associationsClient<associations>, Prisma__associationsClient<associationsGetPayload<T>>>

    /**
     * Count the number of Associations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {associationsCountArgs} args - Arguments to filter Associations to count.
     * @example
     * // Count the number of Associations
     * const count = await prisma.associations.count({
     *   where: {
     *     // ... the filter for the Associations we want to count
     *   }
     * })
    **/
    count<T extends associationsCountArgs>(
      args?: Subset<T, associationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssociationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Associations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssociationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssociationsAggregateArgs>(args: Subset<T, AssociationsAggregateArgs>): PrismaPromise<GetAssociationsAggregateType<T>>

    /**
     * Group by Associations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssociationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssociationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssociationsGroupByArgs['orderBy'] }
        : { orderBy?: AssociationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssociationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssociationsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for associations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__associationsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    action<T extends actionFindManyArgs = {}>(args?: Subset<T, actionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<action>| Null>, PrismaPromise<Array<actionGetPayload<T>>| Null>>;

    user_associations<T extends user_associationsFindManyArgs = {}>(args?: Subset<T, user_associationsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_associations>| Null>, PrismaPromise<Array<user_associationsGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * associations base type for findUnique actions
   */
  export type associationsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the associations
     * 
    **/
    select?: associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: associationsInclude | null
    /**
     * Filter, which associations to fetch.
     * 
    **/
    where: associationsWhereUniqueInput
  }

  /**
   * associations: findUnique
   */
  export interface associationsFindUniqueArgs extends associationsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * associations base type for findFirst actions
   */
  export type associationsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the associations
     * 
    **/
    select?: associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: associationsInclude | null
    /**
     * Filter, which associations to fetch.
     * 
    **/
    where?: associationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of associations to fetch.
     * 
    **/
    orderBy?: Enumerable<associationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for associations.
     * 
    **/
    cursor?: associationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` associations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` associations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of associations.
     * 
    **/
    distinct?: Enumerable<AssociationsScalarFieldEnum>
  }

  /**
   * associations: findFirst
   */
  export interface associationsFindFirstArgs extends associationsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * associations findMany
   */
  export type associationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the associations
     * 
    **/
    select?: associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: associationsInclude | null
    /**
     * Filter, which associations to fetch.
     * 
    **/
    where?: associationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of associations to fetch.
     * 
    **/
    orderBy?: Enumerable<associationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing associations.
     * 
    **/
    cursor?: associationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` associations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` associations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AssociationsScalarFieldEnum>
  }


  /**
   * associations create
   */
  export type associationsCreateArgs = {
    /**
     * Select specific fields to fetch from the associations
     * 
    **/
    select?: associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: associationsInclude | null
    /**
     * The data needed to create a associations.
     * 
    **/
    data: XOR<associationsCreateInput, associationsUncheckedCreateInput>
  }


  /**
   * associations createMany
   */
  export type associationsCreateManyArgs = {
    /**
     * The data used to create many associations.
     * 
    **/
    data: Enumerable<associationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * associations update
   */
  export type associationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the associations
     * 
    **/
    select?: associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: associationsInclude | null
    /**
     * The data needed to update a associations.
     * 
    **/
    data: XOR<associationsUpdateInput, associationsUncheckedUpdateInput>
    /**
     * Choose, which associations to update.
     * 
    **/
    where: associationsWhereUniqueInput
  }


  /**
   * associations updateMany
   */
  export type associationsUpdateManyArgs = {
    /**
     * The data used to update associations.
     * 
    **/
    data: XOR<associationsUpdateManyMutationInput, associationsUncheckedUpdateManyInput>
    /**
     * Filter which associations to update
     * 
    **/
    where?: associationsWhereInput
  }


  /**
   * associations upsert
   */
  export type associationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the associations
     * 
    **/
    select?: associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: associationsInclude | null
    /**
     * The filter to search for the associations to update in case it exists.
     * 
    **/
    where: associationsWhereUniqueInput
    /**
     * In case the associations found by the `where` argument doesn't exist, create a new associations with this data.
     * 
    **/
    create: XOR<associationsCreateInput, associationsUncheckedCreateInput>
    /**
     * In case the associations was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<associationsUpdateInput, associationsUncheckedUpdateInput>
  }


  /**
   * associations delete
   */
  export type associationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the associations
     * 
    **/
    select?: associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: associationsInclude | null
    /**
     * Filter which associations to delete.
     * 
    **/
    where: associationsWhereUniqueInput
  }


  /**
   * associations deleteMany
   */
  export type associationsDeleteManyArgs = {
    /**
     * Filter which associations to delete
     * 
    **/
    where?: associationsWhereInput
  }


  /**
   * associations: findUniqueOrThrow
   */
  export type associationsFindUniqueOrThrowArgs = associationsFindUniqueArgsBase
      

  /**
   * associations: findFirstOrThrow
   */
  export type associationsFindFirstOrThrowArgs = associationsFindFirstArgsBase
      

  /**
   * associations without action
   */
  export type associationsArgs = {
    /**
     * Select specific fields to fetch from the associations
     * 
    **/
    select?: associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: associationsInclude | null
  }



  /**
   * Model doctrine_migration_versions
   */


  export type AggregateDoctrine_migration_versions = {
    _count: Doctrine_migration_versionsCountAggregateOutputType | null
    _avg: Doctrine_migration_versionsAvgAggregateOutputType | null
    _sum: Doctrine_migration_versionsSumAggregateOutputType | null
    _min: Doctrine_migration_versionsMinAggregateOutputType | null
    _max: Doctrine_migration_versionsMaxAggregateOutputType | null
  }

  export type Doctrine_migration_versionsAvgAggregateOutputType = {
    execution_time: number | null
  }

  export type Doctrine_migration_versionsSumAggregateOutputType = {
    execution_time: number | null
  }

  export type Doctrine_migration_versionsMinAggregateOutputType = {
    version: string | null
    executed_at: Date | null
    execution_time: number | null
  }

  export type Doctrine_migration_versionsMaxAggregateOutputType = {
    version: string | null
    executed_at: Date | null
    execution_time: number | null
  }

  export type Doctrine_migration_versionsCountAggregateOutputType = {
    version: number
    executed_at: number
    execution_time: number
    _all: number
  }


  export type Doctrine_migration_versionsAvgAggregateInputType = {
    execution_time?: true
  }

  export type Doctrine_migration_versionsSumAggregateInputType = {
    execution_time?: true
  }

  export type Doctrine_migration_versionsMinAggregateInputType = {
    version?: true
    executed_at?: true
    execution_time?: true
  }

  export type Doctrine_migration_versionsMaxAggregateInputType = {
    version?: true
    executed_at?: true
    execution_time?: true
  }

  export type Doctrine_migration_versionsCountAggregateInputType = {
    version?: true
    executed_at?: true
    execution_time?: true
    _all?: true
  }

  export type Doctrine_migration_versionsAggregateArgs = {
    /**
     * Filter which doctrine_migration_versions to aggregate.
     * 
    **/
    where?: doctrine_migration_versionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctrine_migration_versions to fetch.
     * 
    **/
    orderBy?: Enumerable<doctrine_migration_versionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: doctrine_migration_versionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctrine_migration_versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctrine_migration_versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doctrine_migration_versions
    **/
    _count?: true | Doctrine_migration_versionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Doctrine_migration_versionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Doctrine_migration_versionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Doctrine_migration_versionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Doctrine_migration_versionsMaxAggregateInputType
  }

  export type GetDoctrine_migration_versionsAggregateType<T extends Doctrine_migration_versionsAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctrine_migration_versions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctrine_migration_versions[P]>
      : GetScalarType<T[P], AggregateDoctrine_migration_versions[P]>
  }




  export type Doctrine_migration_versionsGroupByArgs = {
    where?: doctrine_migration_versionsWhereInput
    orderBy?: Enumerable<doctrine_migration_versionsOrderByWithAggregationInput>
    by: Array<Doctrine_migration_versionsScalarFieldEnum>
    having?: doctrine_migration_versionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Doctrine_migration_versionsCountAggregateInputType | true
    _avg?: Doctrine_migration_versionsAvgAggregateInputType
    _sum?: Doctrine_migration_versionsSumAggregateInputType
    _min?: Doctrine_migration_versionsMinAggregateInputType
    _max?: Doctrine_migration_versionsMaxAggregateInputType
  }


  export type Doctrine_migration_versionsGroupByOutputType = {
    version: string
    executed_at: Date | null
    execution_time: number | null
    _count: Doctrine_migration_versionsCountAggregateOutputType | null
    _avg: Doctrine_migration_versionsAvgAggregateOutputType | null
    _sum: Doctrine_migration_versionsSumAggregateOutputType | null
    _min: Doctrine_migration_versionsMinAggregateOutputType | null
    _max: Doctrine_migration_versionsMaxAggregateOutputType | null
  }

  type GetDoctrine_migration_versionsGroupByPayload<T extends Doctrine_migration_versionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Doctrine_migration_versionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Doctrine_migration_versionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Doctrine_migration_versionsGroupByOutputType[P]>
            : GetScalarType<T[P], Doctrine_migration_versionsGroupByOutputType[P]>
        }
      >
    >


  export type doctrine_migration_versionsSelect = {
    version?: boolean
    executed_at?: boolean
    execution_time?: boolean
  }

  export type doctrine_migration_versionsGetPayload<
    S extends boolean | null | undefined | doctrine_migration_versionsArgs,
    U = keyof S
      > = S extends true
        ? doctrine_migration_versions
    : S extends undefined
    ? never
    : S extends doctrine_migration_versionsArgs | doctrine_migration_versionsFindManyArgs
    ?'include' extends U
    ? doctrine_migration_versions 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof doctrine_migration_versions ? doctrine_migration_versions[P] : never
  } 
    : doctrine_migration_versions
  : doctrine_migration_versions


  type doctrine_migration_versionsCountArgs = Merge<
    Omit<doctrine_migration_versionsFindManyArgs, 'select' | 'include'> & {
      select?: Doctrine_migration_versionsCountAggregateInputType | true
    }
  >

  export interface doctrine_migration_versionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Doctrine_migration_versions that matches the filter.
     * @param {doctrine_migration_versionsFindUniqueArgs} args - Arguments to find a Doctrine_migration_versions
     * @example
     * // Get one Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends doctrine_migration_versionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, doctrine_migration_versionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'doctrine_migration_versions'> extends True ? CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T>>> : CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions | null, null>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T> | null, null>>

    /**
     * Find the first Doctrine_migration_versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctrine_migration_versionsFindFirstArgs} args - Arguments to find a Doctrine_migration_versions
     * @example
     * // Get one Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends doctrine_migration_versionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, doctrine_migration_versionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'doctrine_migration_versions'> extends True ? CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T>>> : CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions | null, null>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T> | null, null>>

    /**
     * Find zero or more Doctrine_migration_versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctrine_migration_versionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.findMany()
     * 
     * // Get first 10 Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.findMany({ take: 10 })
     * 
     * // Only select the `version`
     * const doctrine_migration_versionsWithVersionOnly = await prisma.doctrine_migration_versions.findMany({ select: { version: true } })
     * 
    **/
    findMany<T extends doctrine_migration_versionsFindManyArgs>(
      args?: SelectSubset<T, doctrine_migration_versionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<doctrine_migration_versions>>, PrismaPromise<Array<doctrine_migration_versionsGetPayload<T>>>>

    /**
     * Create a Doctrine_migration_versions.
     * @param {doctrine_migration_versionsCreateArgs} args - Arguments to create a Doctrine_migration_versions.
     * @example
     * // Create one Doctrine_migration_versions
     * const Doctrine_migration_versions = await prisma.doctrine_migration_versions.create({
     *   data: {
     *     // ... data to create a Doctrine_migration_versions
     *   }
     * })
     * 
    **/
    create<T extends doctrine_migration_versionsCreateArgs>(
      args: SelectSubset<T, doctrine_migration_versionsCreateArgs>
    ): CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T>>>

    /**
     * Create many Doctrine_migration_versions.
     *     @param {doctrine_migration_versionsCreateManyArgs} args - Arguments to create many Doctrine_migration_versions.
     *     @example
     *     // Create many Doctrine_migration_versions
     *     const doctrine_migration_versions = await prisma.doctrine_migration_versions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends doctrine_migration_versionsCreateManyArgs>(
      args?: SelectSubset<T, doctrine_migration_versionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Doctrine_migration_versions.
     * @param {doctrine_migration_versionsDeleteArgs} args - Arguments to delete one Doctrine_migration_versions.
     * @example
     * // Delete one Doctrine_migration_versions
     * const Doctrine_migration_versions = await prisma.doctrine_migration_versions.delete({
     *   where: {
     *     // ... filter to delete one Doctrine_migration_versions
     *   }
     * })
     * 
    **/
    delete<T extends doctrine_migration_versionsDeleteArgs>(
      args: SelectSubset<T, doctrine_migration_versionsDeleteArgs>
    ): CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T>>>

    /**
     * Update one Doctrine_migration_versions.
     * @param {doctrine_migration_versionsUpdateArgs} args - Arguments to update one Doctrine_migration_versions.
     * @example
     * // Update one Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends doctrine_migration_versionsUpdateArgs>(
      args: SelectSubset<T, doctrine_migration_versionsUpdateArgs>
    ): CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T>>>

    /**
     * Delete zero or more Doctrine_migration_versions.
     * @param {doctrine_migration_versionsDeleteManyArgs} args - Arguments to filter Doctrine_migration_versions to delete.
     * @example
     * // Delete a few Doctrine_migration_versions
     * const { count } = await prisma.doctrine_migration_versions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends doctrine_migration_versionsDeleteManyArgs>(
      args?: SelectSubset<T, doctrine_migration_versionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctrine_migration_versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctrine_migration_versionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends doctrine_migration_versionsUpdateManyArgs>(
      args: SelectSubset<T, doctrine_migration_versionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctrine_migration_versions.
     * @param {doctrine_migration_versionsUpsertArgs} args - Arguments to update or create a Doctrine_migration_versions.
     * @example
     * // Update or create a Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.upsert({
     *   create: {
     *     // ... data to create a Doctrine_migration_versions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctrine_migration_versions we want to update
     *   }
     * })
    **/
    upsert<T extends doctrine_migration_versionsUpsertArgs>(
      args: SelectSubset<T, doctrine_migration_versionsUpsertArgs>
    ): CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T>>>

    /**
     * Find one Doctrine_migration_versions that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {doctrine_migration_versionsFindUniqueOrThrowArgs} args - Arguments to find a Doctrine_migration_versions
     * @example
     * // Get one Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends doctrine_migration_versionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, doctrine_migration_versionsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T>>>

    /**
     * Find the first Doctrine_migration_versions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctrine_migration_versionsFindFirstOrThrowArgs} args - Arguments to find a Doctrine_migration_versions
     * @example
     * // Get one Doctrine_migration_versions
     * const doctrine_migration_versions = await prisma.doctrine_migration_versions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends doctrine_migration_versionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, doctrine_migration_versionsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__doctrine_migration_versionsClient<doctrine_migration_versions>, Prisma__doctrine_migration_versionsClient<doctrine_migration_versionsGetPayload<T>>>

    /**
     * Count the number of Doctrine_migration_versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctrine_migration_versionsCountArgs} args - Arguments to filter Doctrine_migration_versions to count.
     * @example
     * // Count the number of Doctrine_migration_versions
     * const count = await prisma.doctrine_migration_versions.count({
     *   where: {
     *     // ... the filter for the Doctrine_migration_versions we want to count
     *   }
     * })
    **/
    count<T extends doctrine_migration_versionsCountArgs>(
      args?: Subset<T, doctrine_migration_versionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Doctrine_migration_versionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctrine_migration_versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Doctrine_migration_versionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Doctrine_migration_versionsAggregateArgs>(args: Subset<T, Doctrine_migration_versionsAggregateArgs>): PrismaPromise<GetDoctrine_migration_versionsAggregateType<T>>

    /**
     * Group by Doctrine_migration_versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Doctrine_migration_versionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Doctrine_migration_versionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Doctrine_migration_versionsGroupByArgs['orderBy'] }
        : { orderBy?: Doctrine_migration_versionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Doctrine_migration_versionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctrine_migration_versionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for doctrine_migration_versions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__doctrine_migration_versionsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * doctrine_migration_versions base type for findUnique actions
   */
  export type doctrine_migration_versionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the doctrine_migration_versions
     * 
    **/
    select?: doctrine_migration_versionsSelect | null
    /**
     * Filter, which doctrine_migration_versions to fetch.
     * 
    **/
    where: doctrine_migration_versionsWhereUniqueInput
  }

  /**
   * doctrine_migration_versions: findUnique
   */
  export interface doctrine_migration_versionsFindUniqueArgs extends doctrine_migration_versionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * doctrine_migration_versions base type for findFirst actions
   */
  export type doctrine_migration_versionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the doctrine_migration_versions
     * 
    **/
    select?: doctrine_migration_versionsSelect | null
    /**
     * Filter, which doctrine_migration_versions to fetch.
     * 
    **/
    where?: doctrine_migration_versionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctrine_migration_versions to fetch.
     * 
    **/
    orderBy?: Enumerable<doctrine_migration_versionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctrine_migration_versions.
     * 
    **/
    cursor?: doctrine_migration_versionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctrine_migration_versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctrine_migration_versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctrine_migration_versions.
     * 
    **/
    distinct?: Enumerable<Doctrine_migration_versionsScalarFieldEnum>
  }

  /**
   * doctrine_migration_versions: findFirst
   */
  export interface doctrine_migration_versionsFindFirstArgs extends doctrine_migration_versionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * doctrine_migration_versions findMany
   */
  export type doctrine_migration_versionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the doctrine_migration_versions
     * 
    **/
    select?: doctrine_migration_versionsSelect | null
    /**
     * Filter, which doctrine_migration_versions to fetch.
     * 
    **/
    where?: doctrine_migration_versionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctrine_migration_versions to fetch.
     * 
    **/
    orderBy?: Enumerable<doctrine_migration_versionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doctrine_migration_versions.
     * 
    **/
    cursor?: doctrine_migration_versionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctrine_migration_versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctrine_migration_versions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Doctrine_migration_versionsScalarFieldEnum>
  }


  /**
   * doctrine_migration_versions create
   */
  export type doctrine_migration_versionsCreateArgs = {
    /**
     * Select specific fields to fetch from the doctrine_migration_versions
     * 
    **/
    select?: doctrine_migration_versionsSelect | null
    /**
     * The data needed to create a doctrine_migration_versions.
     * 
    **/
    data: XOR<doctrine_migration_versionsCreateInput, doctrine_migration_versionsUncheckedCreateInput>
  }


  /**
   * doctrine_migration_versions createMany
   */
  export type doctrine_migration_versionsCreateManyArgs = {
    /**
     * The data used to create many doctrine_migration_versions.
     * 
    **/
    data: Enumerable<doctrine_migration_versionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * doctrine_migration_versions update
   */
  export type doctrine_migration_versionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the doctrine_migration_versions
     * 
    **/
    select?: doctrine_migration_versionsSelect | null
    /**
     * The data needed to update a doctrine_migration_versions.
     * 
    **/
    data: XOR<doctrine_migration_versionsUpdateInput, doctrine_migration_versionsUncheckedUpdateInput>
    /**
     * Choose, which doctrine_migration_versions to update.
     * 
    **/
    where: doctrine_migration_versionsWhereUniqueInput
  }


  /**
   * doctrine_migration_versions updateMany
   */
  export type doctrine_migration_versionsUpdateManyArgs = {
    /**
     * The data used to update doctrine_migration_versions.
     * 
    **/
    data: XOR<doctrine_migration_versionsUpdateManyMutationInput, doctrine_migration_versionsUncheckedUpdateManyInput>
    /**
     * Filter which doctrine_migration_versions to update
     * 
    **/
    where?: doctrine_migration_versionsWhereInput
  }


  /**
   * doctrine_migration_versions upsert
   */
  export type doctrine_migration_versionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the doctrine_migration_versions
     * 
    **/
    select?: doctrine_migration_versionsSelect | null
    /**
     * The filter to search for the doctrine_migration_versions to update in case it exists.
     * 
    **/
    where: doctrine_migration_versionsWhereUniqueInput
    /**
     * In case the doctrine_migration_versions found by the `where` argument doesn't exist, create a new doctrine_migration_versions with this data.
     * 
    **/
    create: XOR<doctrine_migration_versionsCreateInput, doctrine_migration_versionsUncheckedCreateInput>
    /**
     * In case the doctrine_migration_versions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<doctrine_migration_versionsUpdateInput, doctrine_migration_versionsUncheckedUpdateInput>
  }


  /**
   * doctrine_migration_versions delete
   */
  export type doctrine_migration_versionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the doctrine_migration_versions
     * 
    **/
    select?: doctrine_migration_versionsSelect | null
    /**
     * Filter which doctrine_migration_versions to delete.
     * 
    **/
    where: doctrine_migration_versionsWhereUniqueInput
  }


  /**
   * doctrine_migration_versions deleteMany
   */
  export type doctrine_migration_versionsDeleteManyArgs = {
    /**
     * Filter which doctrine_migration_versions to delete
     * 
    **/
    where?: doctrine_migration_versionsWhereInput
  }


  /**
   * doctrine_migration_versions: findUniqueOrThrow
   */
  export type doctrine_migration_versionsFindUniqueOrThrowArgs = doctrine_migration_versionsFindUniqueArgsBase
      

  /**
   * doctrine_migration_versions: findFirstOrThrow
   */
  export type doctrine_migration_versionsFindFirstOrThrowArgs = doctrine_migration_versionsFindFirstArgsBase
      

  /**
   * doctrine_migration_versions without action
   */
  export type doctrine_migration_versionsArgs = {
    /**
     * Select specific fields to fetch from the doctrine_migration_versions
     * 
    **/
    select?: doctrine_migration_versionsSelect | null
  }



  /**
   * Model messenger_messages
   */


  export type AggregateMessenger_messages = {
    _count: Messenger_messagesCountAggregateOutputType | null
    _avg: Messenger_messagesAvgAggregateOutputType | null
    _sum: Messenger_messagesSumAggregateOutputType | null
    _min: Messenger_messagesMinAggregateOutputType | null
    _max: Messenger_messagesMaxAggregateOutputType | null
  }

  export type Messenger_messagesAvgAggregateOutputType = {
    id: number | null
  }

  export type Messenger_messagesSumAggregateOutputType = {
    id: bigint | null
  }

  export type Messenger_messagesMinAggregateOutputType = {
    id: bigint | null
    body: string | null
    headers: string | null
    queue_name: string | null
    created_at: Date | null
    available_at: Date | null
    delivered_at: Date | null
  }

  export type Messenger_messagesMaxAggregateOutputType = {
    id: bigint | null
    body: string | null
    headers: string | null
    queue_name: string | null
    created_at: Date | null
    available_at: Date | null
    delivered_at: Date | null
  }

  export type Messenger_messagesCountAggregateOutputType = {
    id: number
    body: number
    headers: number
    queue_name: number
    created_at: number
    available_at: number
    delivered_at: number
    _all: number
  }


  export type Messenger_messagesAvgAggregateInputType = {
    id?: true
  }

  export type Messenger_messagesSumAggregateInputType = {
    id?: true
  }

  export type Messenger_messagesMinAggregateInputType = {
    id?: true
    body?: true
    headers?: true
    queue_name?: true
    created_at?: true
    available_at?: true
    delivered_at?: true
  }

  export type Messenger_messagesMaxAggregateInputType = {
    id?: true
    body?: true
    headers?: true
    queue_name?: true
    created_at?: true
    available_at?: true
    delivered_at?: true
  }

  export type Messenger_messagesCountAggregateInputType = {
    id?: true
    body?: true
    headers?: true
    queue_name?: true
    created_at?: true
    available_at?: true
    delivered_at?: true
    _all?: true
  }

  export type Messenger_messagesAggregateArgs = {
    /**
     * Filter which messenger_messages to aggregate.
     * 
    **/
    where?: messenger_messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messenger_messages to fetch.
     * 
    **/
    orderBy?: Enumerable<messenger_messagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: messenger_messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messenger_messages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messenger_messages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messenger_messages
    **/
    _count?: true | Messenger_messagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Messenger_messagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Messenger_messagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Messenger_messagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Messenger_messagesMaxAggregateInputType
  }

  export type GetMessenger_messagesAggregateType<T extends Messenger_messagesAggregateArgs> = {
        [P in keyof T & keyof AggregateMessenger_messages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessenger_messages[P]>
      : GetScalarType<T[P], AggregateMessenger_messages[P]>
  }




  export type Messenger_messagesGroupByArgs = {
    where?: messenger_messagesWhereInput
    orderBy?: Enumerable<messenger_messagesOrderByWithAggregationInput>
    by: Array<Messenger_messagesScalarFieldEnum>
    having?: messenger_messagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Messenger_messagesCountAggregateInputType | true
    _avg?: Messenger_messagesAvgAggregateInputType
    _sum?: Messenger_messagesSumAggregateInputType
    _min?: Messenger_messagesMinAggregateInputType
    _max?: Messenger_messagesMaxAggregateInputType
  }


  export type Messenger_messagesGroupByOutputType = {
    id: bigint
    body: string
    headers: string
    queue_name: string
    created_at: Date
    available_at: Date
    delivered_at: Date | null
    _count: Messenger_messagesCountAggregateOutputType | null
    _avg: Messenger_messagesAvgAggregateOutputType | null
    _sum: Messenger_messagesSumAggregateOutputType | null
    _min: Messenger_messagesMinAggregateOutputType | null
    _max: Messenger_messagesMaxAggregateOutputType | null
  }

  type GetMessenger_messagesGroupByPayload<T extends Messenger_messagesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Messenger_messagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Messenger_messagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Messenger_messagesGroupByOutputType[P]>
            : GetScalarType<T[P], Messenger_messagesGroupByOutputType[P]>
        }
      >
    >


  export type messenger_messagesSelect = {
    id?: boolean
    body?: boolean
    headers?: boolean
    queue_name?: boolean
    created_at?: boolean
    available_at?: boolean
    delivered_at?: boolean
  }

  export type messenger_messagesGetPayload<
    S extends boolean | null | undefined | messenger_messagesArgs,
    U = keyof S
      > = S extends true
        ? messenger_messages
    : S extends undefined
    ? never
    : S extends messenger_messagesArgs | messenger_messagesFindManyArgs
    ?'include' extends U
    ? messenger_messages 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof messenger_messages ? messenger_messages[P] : never
  } 
    : messenger_messages
  : messenger_messages


  type messenger_messagesCountArgs = Merge<
    Omit<messenger_messagesFindManyArgs, 'select' | 'include'> & {
      select?: Messenger_messagesCountAggregateInputType | true
    }
  >

  export interface messenger_messagesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Messenger_messages that matches the filter.
     * @param {messenger_messagesFindUniqueArgs} args - Arguments to find a Messenger_messages
     * @example
     * // Get one Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends messenger_messagesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, messenger_messagesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'messenger_messages'> extends True ? CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T>>> : CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages | null, null>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T> | null, null>>

    /**
     * Find the first Messenger_messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messenger_messagesFindFirstArgs} args - Arguments to find a Messenger_messages
     * @example
     * // Get one Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends messenger_messagesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, messenger_messagesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'messenger_messages'> extends True ? CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T>>> : CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages | null, null>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T> | null, null>>

    /**
     * Find zero or more Messenger_messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messenger_messagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.findMany()
     * 
     * // Get first 10 Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messenger_messagesWithIdOnly = await prisma.messenger_messages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends messenger_messagesFindManyArgs>(
      args?: SelectSubset<T, messenger_messagesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<messenger_messages>>, PrismaPromise<Array<messenger_messagesGetPayload<T>>>>

    /**
     * Create a Messenger_messages.
     * @param {messenger_messagesCreateArgs} args - Arguments to create a Messenger_messages.
     * @example
     * // Create one Messenger_messages
     * const Messenger_messages = await prisma.messenger_messages.create({
     *   data: {
     *     // ... data to create a Messenger_messages
     *   }
     * })
     * 
    **/
    create<T extends messenger_messagesCreateArgs>(
      args: SelectSubset<T, messenger_messagesCreateArgs>
    ): CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T>>>

    /**
     * Create many Messenger_messages.
     *     @param {messenger_messagesCreateManyArgs} args - Arguments to create many Messenger_messages.
     *     @example
     *     // Create many Messenger_messages
     *     const messenger_messages = await prisma.messenger_messages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends messenger_messagesCreateManyArgs>(
      args?: SelectSubset<T, messenger_messagesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Messenger_messages.
     * @param {messenger_messagesDeleteArgs} args - Arguments to delete one Messenger_messages.
     * @example
     * // Delete one Messenger_messages
     * const Messenger_messages = await prisma.messenger_messages.delete({
     *   where: {
     *     // ... filter to delete one Messenger_messages
     *   }
     * })
     * 
    **/
    delete<T extends messenger_messagesDeleteArgs>(
      args: SelectSubset<T, messenger_messagesDeleteArgs>
    ): CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T>>>

    /**
     * Update one Messenger_messages.
     * @param {messenger_messagesUpdateArgs} args - Arguments to update one Messenger_messages.
     * @example
     * // Update one Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends messenger_messagesUpdateArgs>(
      args: SelectSubset<T, messenger_messagesUpdateArgs>
    ): CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T>>>

    /**
     * Delete zero or more Messenger_messages.
     * @param {messenger_messagesDeleteManyArgs} args - Arguments to filter Messenger_messages to delete.
     * @example
     * // Delete a few Messenger_messages
     * const { count } = await prisma.messenger_messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends messenger_messagesDeleteManyArgs>(
      args?: SelectSubset<T, messenger_messagesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messenger_messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messenger_messagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends messenger_messagesUpdateManyArgs>(
      args: SelectSubset<T, messenger_messagesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Messenger_messages.
     * @param {messenger_messagesUpsertArgs} args - Arguments to update or create a Messenger_messages.
     * @example
     * // Update or create a Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.upsert({
     *   create: {
     *     // ... data to create a Messenger_messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Messenger_messages we want to update
     *   }
     * })
    **/
    upsert<T extends messenger_messagesUpsertArgs>(
      args: SelectSubset<T, messenger_messagesUpsertArgs>
    ): CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T>>>

    /**
     * Find one Messenger_messages that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {messenger_messagesFindUniqueOrThrowArgs} args - Arguments to find a Messenger_messages
     * @example
     * // Get one Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends messenger_messagesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, messenger_messagesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T>>>

    /**
     * Find the first Messenger_messages that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messenger_messagesFindFirstOrThrowArgs} args - Arguments to find a Messenger_messages
     * @example
     * // Get one Messenger_messages
     * const messenger_messages = await prisma.messenger_messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends messenger_messagesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, messenger_messagesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__messenger_messagesClient<messenger_messages>, Prisma__messenger_messagesClient<messenger_messagesGetPayload<T>>>

    /**
     * Count the number of Messenger_messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messenger_messagesCountArgs} args - Arguments to filter Messenger_messages to count.
     * @example
     * // Count the number of Messenger_messages
     * const count = await prisma.messenger_messages.count({
     *   where: {
     *     // ... the filter for the Messenger_messages we want to count
     *   }
     * })
    **/
    count<T extends messenger_messagesCountArgs>(
      args?: Subset<T, messenger_messagesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Messenger_messagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Messenger_messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Messenger_messagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Messenger_messagesAggregateArgs>(args: Subset<T, Messenger_messagesAggregateArgs>): PrismaPromise<GetMessenger_messagesAggregateType<T>>

    /**
     * Group by Messenger_messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Messenger_messagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Messenger_messagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Messenger_messagesGroupByArgs['orderBy'] }
        : { orderBy?: Messenger_messagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Messenger_messagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessenger_messagesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for messenger_messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__messenger_messagesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * messenger_messages base type for findUnique actions
   */
  export type messenger_messagesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the messenger_messages
     * 
    **/
    select?: messenger_messagesSelect | null
    /**
     * Filter, which messenger_messages to fetch.
     * 
    **/
    where: messenger_messagesWhereUniqueInput
  }

  /**
   * messenger_messages: findUnique
   */
  export interface messenger_messagesFindUniqueArgs extends messenger_messagesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * messenger_messages base type for findFirst actions
   */
  export type messenger_messagesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the messenger_messages
     * 
    **/
    select?: messenger_messagesSelect | null
    /**
     * Filter, which messenger_messages to fetch.
     * 
    **/
    where?: messenger_messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messenger_messages to fetch.
     * 
    **/
    orderBy?: Enumerable<messenger_messagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messenger_messages.
     * 
    **/
    cursor?: messenger_messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messenger_messages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messenger_messages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messenger_messages.
     * 
    **/
    distinct?: Enumerable<Messenger_messagesScalarFieldEnum>
  }

  /**
   * messenger_messages: findFirst
   */
  export interface messenger_messagesFindFirstArgs extends messenger_messagesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * messenger_messages findMany
   */
  export type messenger_messagesFindManyArgs = {
    /**
     * Select specific fields to fetch from the messenger_messages
     * 
    **/
    select?: messenger_messagesSelect | null
    /**
     * Filter, which messenger_messages to fetch.
     * 
    **/
    where?: messenger_messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messenger_messages to fetch.
     * 
    **/
    orderBy?: Enumerable<messenger_messagesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messenger_messages.
     * 
    **/
    cursor?: messenger_messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messenger_messages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messenger_messages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Messenger_messagesScalarFieldEnum>
  }


  /**
   * messenger_messages create
   */
  export type messenger_messagesCreateArgs = {
    /**
     * Select specific fields to fetch from the messenger_messages
     * 
    **/
    select?: messenger_messagesSelect | null
    /**
     * The data needed to create a messenger_messages.
     * 
    **/
    data: XOR<messenger_messagesCreateInput, messenger_messagesUncheckedCreateInput>
  }


  /**
   * messenger_messages createMany
   */
  export type messenger_messagesCreateManyArgs = {
    /**
     * The data used to create many messenger_messages.
     * 
    **/
    data: Enumerable<messenger_messagesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * messenger_messages update
   */
  export type messenger_messagesUpdateArgs = {
    /**
     * Select specific fields to fetch from the messenger_messages
     * 
    **/
    select?: messenger_messagesSelect | null
    /**
     * The data needed to update a messenger_messages.
     * 
    **/
    data: XOR<messenger_messagesUpdateInput, messenger_messagesUncheckedUpdateInput>
    /**
     * Choose, which messenger_messages to update.
     * 
    **/
    where: messenger_messagesWhereUniqueInput
  }


  /**
   * messenger_messages updateMany
   */
  export type messenger_messagesUpdateManyArgs = {
    /**
     * The data used to update messenger_messages.
     * 
    **/
    data: XOR<messenger_messagesUpdateManyMutationInput, messenger_messagesUncheckedUpdateManyInput>
    /**
     * Filter which messenger_messages to update
     * 
    **/
    where?: messenger_messagesWhereInput
  }


  /**
   * messenger_messages upsert
   */
  export type messenger_messagesUpsertArgs = {
    /**
     * Select specific fields to fetch from the messenger_messages
     * 
    **/
    select?: messenger_messagesSelect | null
    /**
     * The filter to search for the messenger_messages to update in case it exists.
     * 
    **/
    where: messenger_messagesWhereUniqueInput
    /**
     * In case the messenger_messages found by the `where` argument doesn't exist, create a new messenger_messages with this data.
     * 
    **/
    create: XOR<messenger_messagesCreateInput, messenger_messagesUncheckedCreateInput>
    /**
     * In case the messenger_messages was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<messenger_messagesUpdateInput, messenger_messagesUncheckedUpdateInput>
  }


  /**
   * messenger_messages delete
   */
  export type messenger_messagesDeleteArgs = {
    /**
     * Select specific fields to fetch from the messenger_messages
     * 
    **/
    select?: messenger_messagesSelect | null
    /**
     * Filter which messenger_messages to delete.
     * 
    **/
    where: messenger_messagesWhereUniqueInput
  }


  /**
   * messenger_messages deleteMany
   */
  export type messenger_messagesDeleteManyArgs = {
    /**
     * Filter which messenger_messages to delete
     * 
    **/
    where?: messenger_messagesWhereInput
  }


  /**
   * messenger_messages: findUniqueOrThrow
   */
  export type messenger_messagesFindUniqueOrThrowArgs = messenger_messagesFindUniqueArgsBase
      

  /**
   * messenger_messages: findFirstOrThrow
   */
  export type messenger_messagesFindFirstOrThrowArgs = messenger_messagesFindFirstArgsBase
      

  /**
   * messenger_messages without action
   */
  export type messenger_messagesArgs = {
    /**
     * Select specific fields to fetch from the messenger_messages
     * 
    **/
    select?: messenger_messagesSelect | null
  }



  /**
   * Model reset_password_request
   */


  export type AggregateReset_password_request = {
    _count: Reset_password_requestCountAggregateOutputType | null
    _avg: Reset_password_requestAvgAggregateOutputType | null
    _sum: Reset_password_requestSumAggregateOutputType | null
    _min: Reset_password_requestMinAggregateOutputType | null
    _max: Reset_password_requestMaxAggregateOutputType | null
  }

  export type Reset_password_requestAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Reset_password_requestSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type Reset_password_requestMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    selector: string | null
    hashed_token: string | null
    requested_at: Date | null
    expires_at: Date | null
  }

  export type Reset_password_requestMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    selector: string | null
    hashed_token: string | null
    requested_at: Date | null
    expires_at: Date | null
  }

  export type Reset_password_requestCountAggregateOutputType = {
    id: number
    user_id: number
    selector: number
    hashed_token: number
    requested_at: number
    expires_at: number
    _all: number
  }


  export type Reset_password_requestAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Reset_password_requestSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type Reset_password_requestMinAggregateInputType = {
    id?: true
    user_id?: true
    selector?: true
    hashed_token?: true
    requested_at?: true
    expires_at?: true
  }

  export type Reset_password_requestMaxAggregateInputType = {
    id?: true
    user_id?: true
    selector?: true
    hashed_token?: true
    requested_at?: true
    expires_at?: true
  }

  export type Reset_password_requestCountAggregateInputType = {
    id?: true
    user_id?: true
    selector?: true
    hashed_token?: true
    requested_at?: true
    expires_at?: true
    _all?: true
  }

  export type Reset_password_requestAggregateArgs = {
    /**
     * Filter which reset_password_request to aggregate.
     * 
    **/
    where?: reset_password_requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reset_password_requests to fetch.
     * 
    **/
    orderBy?: Enumerable<reset_password_requestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: reset_password_requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reset_password_requests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reset_password_requests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reset_password_requests
    **/
    _count?: true | Reset_password_requestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Reset_password_requestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Reset_password_requestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Reset_password_requestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Reset_password_requestMaxAggregateInputType
  }

  export type GetReset_password_requestAggregateType<T extends Reset_password_requestAggregateArgs> = {
        [P in keyof T & keyof AggregateReset_password_request]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReset_password_request[P]>
      : GetScalarType<T[P], AggregateReset_password_request[P]>
  }




  export type Reset_password_requestGroupByArgs = {
    where?: reset_password_requestWhereInput
    orderBy?: Enumerable<reset_password_requestOrderByWithAggregationInput>
    by: Array<Reset_password_requestScalarFieldEnum>
    having?: reset_password_requestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Reset_password_requestCountAggregateInputType | true
    _avg?: Reset_password_requestAvgAggregateInputType
    _sum?: Reset_password_requestSumAggregateInputType
    _min?: Reset_password_requestMinAggregateInputType
    _max?: Reset_password_requestMaxAggregateInputType
  }


  export type Reset_password_requestGroupByOutputType = {
    id: number
    user_id: number
    selector: string
    hashed_token: string
    requested_at: Date
    expires_at: Date
    _count: Reset_password_requestCountAggregateOutputType | null
    _avg: Reset_password_requestAvgAggregateOutputType | null
    _sum: Reset_password_requestSumAggregateOutputType | null
    _min: Reset_password_requestMinAggregateOutputType | null
    _max: Reset_password_requestMaxAggregateOutputType | null
  }

  type GetReset_password_requestGroupByPayload<T extends Reset_password_requestGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Reset_password_requestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Reset_password_requestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Reset_password_requestGroupByOutputType[P]>
            : GetScalarType<T[P], Reset_password_requestGroupByOutputType[P]>
        }
      >
    >


  export type reset_password_requestSelect = {
    id?: boolean
    user_id?: boolean
    selector?: boolean
    hashed_token?: boolean
    requested_at?: boolean
    expires_at?: boolean
    user?: boolean | userArgs
  }

  export type reset_password_requestInclude = {
    user?: boolean | userArgs
  }

  export type reset_password_requestGetPayload<
    S extends boolean | null | undefined | reset_password_requestArgs,
    U = keyof S
      > = S extends true
        ? reset_password_request
    : S extends undefined
    ? never
    : S extends reset_password_requestArgs | reset_password_requestFindManyArgs
    ?'include' extends U
    ? reset_password_request  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof reset_password_request ? reset_password_request[P] : never
  } 
    : reset_password_request
  : reset_password_request


  type reset_password_requestCountArgs = Merge<
    Omit<reset_password_requestFindManyArgs, 'select' | 'include'> & {
      select?: Reset_password_requestCountAggregateInputType | true
    }
  >

  export interface reset_password_requestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Reset_password_request that matches the filter.
     * @param {reset_password_requestFindUniqueArgs} args - Arguments to find a Reset_password_request
     * @example
     * // Get one Reset_password_request
     * const reset_password_request = await prisma.reset_password_request.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reset_password_requestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, reset_password_requestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'reset_password_request'> extends True ? CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T>>> : CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request | null, null>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T> | null, null>>

    /**
     * Find the first Reset_password_request that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reset_password_requestFindFirstArgs} args - Arguments to find a Reset_password_request
     * @example
     * // Get one Reset_password_request
     * const reset_password_request = await prisma.reset_password_request.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reset_password_requestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, reset_password_requestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'reset_password_request'> extends True ? CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T>>> : CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request | null, null>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T> | null, null>>

    /**
     * Find zero or more Reset_password_requests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reset_password_requestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reset_password_requests
     * const reset_password_requests = await prisma.reset_password_request.findMany()
     * 
     * // Get first 10 Reset_password_requests
     * const reset_password_requests = await prisma.reset_password_request.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reset_password_requestWithIdOnly = await prisma.reset_password_request.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends reset_password_requestFindManyArgs>(
      args?: SelectSubset<T, reset_password_requestFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<reset_password_request>>, PrismaPromise<Array<reset_password_requestGetPayload<T>>>>

    /**
     * Create a Reset_password_request.
     * @param {reset_password_requestCreateArgs} args - Arguments to create a Reset_password_request.
     * @example
     * // Create one Reset_password_request
     * const Reset_password_request = await prisma.reset_password_request.create({
     *   data: {
     *     // ... data to create a Reset_password_request
     *   }
     * })
     * 
    **/
    create<T extends reset_password_requestCreateArgs>(
      args: SelectSubset<T, reset_password_requestCreateArgs>
    ): CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T>>>

    /**
     * Create many Reset_password_requests.
     *     @param {reset_password_requestCreateManyArgs} args - Arguments to create many Reset_password_requests.
     *     @example
     *     // Create many Reset_password_requests
     *     const reset_password_request = await prisma.reset_password_request.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reset_password_requestCreateManyArgs>(
      args?: SelectSubset<T, reset_password_requestCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reset_password_request.
     * @param {reset_password_requestDeleteArgs} args - Arguments to delete one Reset_password_request.
     * @example
     * // Delete one Reset_password_request
     * const Reset_password_request = await prisma.reset_password_request.delete({
     *   where: {
     *     // ... filter to delete one Reset_password_request
     *   }
     * })
     * 
    **/
    delete<T extends reset_password_requestDeleteArgs>(
      args: SelectSubset<T, reset_password_requestDeleteArgs>
    ): CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T>>>

    /**
     * Update one Reset_password_request.
     * @param {reset_password_requestUpdateArgs} args - Arguments to update one Reset_password_request.
     * @example
     * // Update one Reset_password_request
     * const reset_password_request = await prisma.reset_password_request.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reset_password_requestUpdateArgs>(
      args: SelectSubset<T, reset_password_requestUpdateArgs>
    ): CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T>>>

    /**
     * Delete zero or more Reset_password_requests.
     * @param {reset_password_requestDeleteManyArgs} args - Arguments to filter Reset_password_requests to delete.
     * @example
     * // Delete a few Reset_password_requests
     * const { count } = await prisma.reset_password_request.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reset_password_requestDeleteManyArgs>(
      args?: SelectSubset<T, reset_password_requestDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reset_password_requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reset_password_requestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reset_password_requests
     * const reset_password_request = await prisma.reset_password_request.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reset_password_requestUpdateManyArgs>(
      args: SelectSubset<T, reset_password_requestUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reset_password_request.
     * @param {reset_password_requestUpsertArgs} args - Arguments to update or create a Reset_password_request.
     * @example
     * // Update or create a Reset_password_request
     * const reset_password_request = await prisma.reset_password_request.upsert({
     *   create: {
     *     // ... data to create a Reset_password_request
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reset_password_request we want to update
     *   }
     * })
    **/
    upsert<T extends reset_password_requestUpsertArgs>(
      args: SelectSubset<T, reset_password_requestUpsertArgs>
    ): CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T>>>

    /**
     * Find one Reset_password_request that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {reset_password_requestFindUniqueOrThrowArgs} args - Arguments to find a Reset_password_request
     * @example
     * // Get one Reset_password_request
     * const reset_password_request = await prisma.reset_password_request.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reset_password_requestFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, reset_password_requestFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T>>>

    /**
     * Find the first Reset_password_request that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reset_password_requestFindFirstOrThrowArgs} args - Arguments to find a Reset_password_request
     * @example
     * // Get one Reset_password_request
     * const reset_password_request = await prisma.reset_password_request.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reset_password_requestFindFirstOrThrowArgs>(
      args?: SelectSubset<T, reset_password_requestFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__reset_password_requestClient<reset_password_request>, Prisma__reset_password_requestClient<reset_password_requestGetPayload<T>>>

    /**
     * Count the number of Reset_password_requests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reset_password_requestCountArgs} args - Arguments to filter Reset_password_requests to count.
     * @example
     * // Count the number of Reset_password_requests
     * const count = await prisma.reset_password_request.count({
     *   where: {
     *     // ... the filter for the Reset_password_requests we want to count
     *   }
     * })
    **/
    count<T extends reset_password_requestCountArgs>(
      args?: Subset<T, reset_password_requestCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Reset_password_requestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reset_password_request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Reset_password_requestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Reset_password_requestAggregateArgs>(args: Subset<T, Reset_password_requestAggregateArgs>): PrismaPromise<GetReset_password_requestAggregateType<T>>

    /**
     * Group by Reset_password_request.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Reset_password_requestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Reset_password_requestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Reset_password_requestGroupByArgs['orderBy'] }
        : { orderBy?: Reset_password_requestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Reset_password_requestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReset_password_requestGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for reset_password_request.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__reset_password_requestClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * reset_password_request base type for findUnique actions
   */
  export type reset_password_requestFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the reset_password_request
     * 
    **/
    select?: reset_password_requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reset_password_requestInclude | null
    /**
     * Filter, which reset_password_request to fetch.
     * 
    **/
    where: reset_password_requestWhereUniqueInput
  }

  /**
   * reset_password_request: findUnique
   */
  export interface reset_password_requestFindUniqueArgs extends reset_password_requestFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reset_password_request base type for findFirst actions
   */
  export type reset_password_requestFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the reset_password_request
     * 
    **/
    select?: reset_password_requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reset_password_requestInclude | null
    /**
     * Filter, which reset_password_request to fetch.
     * 
    **/
    where?: reset_password_requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reset_password_requests to fetch.
     * 
    **/
    orderBy?: Enumerable<reset_password_requestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reset_password_requests.
     * 
    **/
    cursor?: reset_password_requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reset_password_requests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reset_password_requests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reset_password_requests.
     * 
    **/
    distinct?: Enumerable<Reset_password_requestScalarFieldEnum>
  }

  /**
   * reset_password_request: findFirst
   */
  export interface reset_password_requestFindFirstArgs extends reset_password_requestFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reset_password_request findMany
   */
  export type reset_password_requestFindManyArgs = {
    /**
     * Select specific fields to fetch from the reset_password_request
     * 
    **/
    select?: reset_password_requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reset_password_requestInclude | null
    /**
     * Filter, which reset_password_requests to fetch.
     * 
    **/
    where?: reset_password_requestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reset_password_requests to fetch.
     * 
    **/
    orderBy?: Enumerable<reset_password_requestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reset_password_requests.
     * 
    **/
    cursor?: reset_password_requestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reset_password_requests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reset_password_requests.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Reset_password_requestScalarFieldEnum>
  }


  /**
   * reset_password_request create
   */
  export type reset_password_requestCreateArgs = {
    /**
     * Select specific fields to fetch from the reset_password_request
     * 
    **/
    select?: reset_password_requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reset_password_requestInclude | null
    /**
     * The data needed to create a reset_password_request.
     * 
    **/
    data: XOR<reset_password_requestCreateInput, reset_password_requestUncheckedCreateInput>
  }


  /**
   * reset_password_request createMany
   */
  export type reset_password_requestCreateManyArgs = {
    /**
     * The data used to create many reset_password_requests.
     * 
    **/
    data: Enumerable<reset_password_requestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * reset_password_request update
   */
  export type reset_password_requestUpdateArgs = {
    /**
     * Select specific fields to fetch from the reset_password_request
     * 
    **/
    select?: reset_password_requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reset_password_requestInclude | null
    /**
     * The data needed to update a reset_password_request.
     * 
    **/
    data: XOR<reset_password_requestUpdateInput, reset_password_requestUncheckedUpdateInput>
    /**
     * Choose, which reset_password_request to update.
     * 
    **/
    where: reset_password_requestWhereUniqueInput
  }


  /**
   * reset_password_request updateMany
   */
  export type reset_password_requestUpdateManyArgs = {
    /**
     * The data used to update reset_password_requests.
     * 
    **/
    data: XOR<reset_password_requestUpdateManyMutationInput, reset_password_requestUncheckedUpdateManyInput>
    /**
     * Filter which reset_password_requests to update
     * 
    **/
    where?: reset_password_requestWhereInput
  }


  /**
   * reset_password_request upsert
   */
  export type reset_password_requestUpsertArgs = {
    /**
     * Select specific fields to fetch from the reset_password_request
     * 
    **/
    select?: reset_password_requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reset_password_requestInclude | null
    /**
     * The filter to search for the reset_password_request to update in case it exists.
     * 
    **/
    where: reset_password_requestWhereUniqueInput
    /**
     * In case the reset_password_request found by the `where` argument doesn't exist, create a new reset_password_request with this data.
     * 
    **/
    create: XOR<reset_password_requestCreateInput, reset_password_requestUncheckedCreateInput>
    /**
     * In case the reset_password_request was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<reset_password_requestUpdateInput, reset_password_requestUncheckedUpdateInput>
  }


  /**
   * reset_password_request delete
   */
  export type reset_password_requestDeleteArgs = {
    /**
     * Select specific fields to fetch from the reset_password_request
     * 
    **/
    select?: reset_password_requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reset_password_requestInclude | null
    /**
     * Filter which reset_password_request to delete.
     * 
    **/
    where: reset_password_requestWhereUniqueInput
  }


  /**
   * reset_password_request deleteMany
   */
  export type reset_password_requestDeleteManyArgs = {
    /**
     * Filter which reset_password_requests to delete
     * 
    **/
    where?: reset_password_requestWhereInput
  }


  /**
   * reset_password_request: findUniqueOrThrow
   */
  export type reset_password_requestFindUniqueOrThrowArgs = reset_password_requestFindUniqueArgsBase
      

  /**
   * reset_password_request: findFirstOrThrow
   */
  export type reset_password_requestFindFirstOrThrowArgs = reset_password_requestFindFirstArgsBase
      

  /**
   * reset_password_request without action
   */
  export type reset_password_requestArgs = {
    /**
     * Select specific fields to fetch from the reset_password_request
     * 
    **/
    select?: reset_password_requestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reset_password_requestInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    email: string | null
    profil_picture: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    email: string | null
    profil_picture: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    roles: number
    password: number
    email: number
    profil_picture: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    profil_picture?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    profil_picture?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    roles?: true
    password?: true
    email?: true
    profil_picture?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string
    roles: JsonValue
    password: string
    email: string | null
    profil_picture: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    username?: boolean
    roles?: boolean
    password?: boolean
    email?: boolean
    profil_picture?: boolean
    action?: boolean | actionFindManyArgs
    associations?: boolean | associationsFindManyArgs
    reset_password_request?: boolean | reset_password_requestFindManyArgs
    user_associations?: boolean | user_associationsFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userInclude = {
    action?: boolean | actionFindManyArgs
    associations?: boolean | associationsFindManyArgs
    reset_password_request?: boolean | reset_password_requestFindManyArgs
    user_associations?: boolean | user_associationsFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]:
        P extends 'action' ? Array < actionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'associations' ? Array < associationsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'reset_password_request' ? Array < reset_password_requestGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user_associations' ? Array < user_associationsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'action' ? Array < actionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'associations' ? Array < associationsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'reset_password_request' ? Array < reset_password_requestGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user_associations' ? Array < user_associationsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null, null>, Prisma__userClient<userGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null, null>, Prisma__userClient<userGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    action<T extends actionFindManyArgs = {}>(args?: Subset<T, actionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<action>| Null>, PrismaPromise<Array<actionGetPayload<T>>| Null>>;

    associations<T extends associationsFindManyArgs = {}>(args?: Subset<T, associationsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<associations>| Null>, PrismaPromise<Array<associationsGetPayload<T>>| Null>>;

    reset_password_request<T extends reset_password_requestFindManyArgs = {}>(args?: Subset<T, reset_password_requestFindManyArgs>): CheckSelect<T, PrismaPromise<Array<reset_password_request>| Null>, PrismaPromise<Array<reset_password_requestGetPayload<T>>| Null>>;

    user_associations<T extends user_associationsFindManyArgs = {}>(args?: Subset<T, user_associationsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_associations>| Null>, PrismaPromise<Array<user_associationsGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }

  /**
   * user: findUnique
   */
  export interface userFindUniqueArgs extends userFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user: findFirst
   */
  export interface userFindFirstArgs extends userFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user: findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs = userFindUniqueArgsBase
      

  /**
   * user: findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs = userFindFirstArgsBase
      

  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
  }



  /**
   * Model user_associations
   */


  export type AggregateUser_associations = {
    _count: User_associationsCountAggregateOutputType | null
    _avg: User_associationsAvgAggregateOutputType | null
    _sum: User_associationsSumAggregateOutputType | null
    _min: User_associationsMinAggregateOutputType | null
    _max: User_associationsMaxAggregateOutputType | null
  }

  export type User_associationsAvgAggregateOutputType = {
    user_id: number | null
    associations_id: number | null
  }

  export type User_associationsSumAggregateOutputType = {
    user_id: number | null
    associations_id: number | null
  }

  export type User_associationsMinAggregateOutputType = {
    user_id: number | null
    associations_id: number | null
  }

  export type User_associationsMaxAggregateOutputType = {
    user_id: number | null
    associations_id: number | null
  }

  export type User_associationsCountAggregateOutputType = {
    user_id: number
    associations_id: number
    _all: number
  }


  export type User_associationsAvgAggregateInputType = {
    user_id?: true
    associations_id?: true
  }

  export type User_associationsSumAggregateInputType = {
    user_id?: true
    associations_id?: true
  }

  export type User_associationsMinAggregateInputType = {
    user_id?: true
    associations_id?: true
  }

  export type User_associationsMaxAggregateInputType = {
    user_id?: true
    associations_id?: true
  }

  export type User_associationsCountAggregateInputType = {
    user_id?: true
    associations_id?: true
    _all?: true
  }

  export type User_associationsAggregateArgs = {
    /**
     * Filter which user_associations to aggregate.
     * 
    **/
    where?: user_associationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_associations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_associationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_associationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_associations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_associations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_associations
    **/
    _count?: true | User_associationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_associationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_associationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_associationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_associationsMaxAggregateInputType
  }

  export type GetUser_associationsAggregateType<T extends User_associationsAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_associations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_associations[P]>
      : GetScalarType<T[P], AggregateUser_associations[P]>
  }




  export type User_associationsGroupByArgs = {
    where?: user_associationsWhereInput
    orderBy?: Enumerable<user_associationsOrderByWithAggregationInput>
    by: Array<User_associationsScalarFieldEnum>
    having?: user_associationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_associationsCountAggregateInputType | true
    _avg?: User_associationsAvgAggregateInputType
    _sum?: User_associationsSumAggregateInputType
    _min?: User_associationsMinAggregateInputType
    _max?: User_associationsMaxAggregateInputType
  }


  export type User_associationsGroupByOutputType = {
    user_id: number
    associations_id: number
    _count: User_associationsCountAggregateOutputType | null
    _avg: User_associationsAvgAggregateOutputType | null
    _sum: User_associationsSumAggregateOutputType | null
    _min: User_associationsMinAggregateOutputType | null
    _max: User_associationsMaxAggregateOutputType | null
  }

  type GetUser_associationsGroupByPayload<T extends User_associationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_associationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_associationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_associationsGroupByOutputType[P]>
            : GetScalarType<T[P], User_associationsGroupByOutputType[P]>
        }
      >
    >


  export type user_associationsSelect = {
    user_id?: boolean
    associations_id?: boolean
    associations?: boolean | associationsArgs
    user?: boolean | userArgs
  }

  export type user_associationsInclude = {
    associations?: boolean | associationsArgs
    user?: boolean | userArgs
  }

  export type user_associationsGetPayload<
    S extends boolean | null | undefined | user_associationsArgs,
    U = keyof S
      > = S extends true
        ? user_associations
    : S extends undefined
    ? never
    : S extends user_associationsArgs | user_associationsFindManyArgs
    ?'include' extends U
    ? user_associations  & {
    [P in TrueKeys<S['include']>]:
        P extends 'associations' ? associationsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'user' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'associations' ? associationsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'user' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof user_associations ? user_associations[P] : never
  } 
    : user_associations
  : user_associations


  type user_associationsCountArgs = Merge<
    Omit<user_associationsFindManyArgs, 'select' | 'include'> & {
      select?: User_associationsCountAggregateInputType | true
    }
  >

  export interface user_associationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User_associations that matches the filter.
     * @param {user_associationsFindUniqueArgs} args - Arguments to find a User_associations
     * @example
     * // Get one User_associations
     * const user_associations = await prisma.user_associations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_associationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_associationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_associations'> extends True ? CheckSelect<T, Prisma__user_associationsClient<user_associations>, Prisma__user_associationsClient<user_associationsGetPayload<T>>> : CheckSelect<T, Prisma__user_associationsClient<user_associations | null, null>, Prisma__user_associationsClient<user_associationsGetPayload<T> | null, null>>

    /**
     * Find the first User_associations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_associationsFindFirstArgs} args - Arguments to find a User_associations
     * @example
     * // Get one User_associations
     * const user_associations = await prisma.user_associations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_associationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_associationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_associations'> extends True ? CheckSelect<T, Prisma__user_associationsClient<user_associations>, Prisma__user_associationsClient<user_associationsGetPayload<T>>> : CheckSelect<T, Prisma__user_associationsClient<user_associations | null, null>, Prisma__user_associationsClient<user_associationsGetPayload<T> | null, null>>

    /**
     * Find zero or more User_associations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_associationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_associations
     * const user_associations = await prisma.user_associations.findMany()
     * 
     * // Get first 10 User_associations
     * const user_associations = await prisma.user_associations.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const user_associationsWithUser_idOnly = await prisma.user_associations.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends user_associationsFindManyArgs>(
      args?: SelectSubset<T, user_associationsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_associations>>, PrismaPromise<Array<user_associationsGetPayload<T>>>>

    /**
     * Create a User_associations.
     * @param {user_associationsCreateArgs} args - Arguments to create a User_associations.
     * @example
     * // Create one User_associations
     * const User_associations = await prisma.user_associations.create({
     *   data: {
     *     // ... data to create a User_associations
     *   }
     * })
     * 
    **/
    create<T extends user_associationsCreateArgs>(
      args: SelectSubset<T, user_associationsCreateArgs>
    ): CheckSelect<T, Prisma__user_associationsClient<user_associations>, Prisma__user_associationsClient<user_associationsGetPayload<T>>>

    /**
     * Create many User_associations.
     *     @param {user_associationsCreateManyArgs} args - Arguments to create many User_associations.
     *     @example
     *     // Create many User_associations
     *     const user_associations = await prisma.user_associations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_associationsCreateManyArgs>(
      args?: SelectSubset<T, user_associationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_associations.
     * @param {user_associationsDeleteArgs} args - Arguments to delete one User_associations.
     * @example
     * // Delete one User_associations
     * const User_associations = await prisma.user_associations.delete({
     *   where: {
     *     // ... filter to delete one User_associations
     *   }
     * })
     * 
    **/
    delete<T extends user_associationsDeleteArgs>(
      args: SelectSubset<T, user_associationsDeleteArgs>
    ): CheckSelect<T, Prisma__user_associationsClient<user_associations>, Prisma__user_associationsClient<user_associationsGetPayload<T>>>

    /**
     * Update one User_associations.
     * @param {user_associationsUpdateArgs} args - Arguments to update one User_associations.
     * @example
     * // Update one User_associations
     * const user_associations = await prisma.user_associations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_associationsUpdateArgs>(
      args: SelectSubset<T, user_associationsUpdateArgs>
    ): CheckSelect<T, Prisma__user_associationsClient<user_associations>, Prisma__user_associationsClient<user_associationsGetPayload<T>>>

    /**
     * Delete zero or more User_associations.
     * @param {user_associationsDeleteManyArgs} args - Arguments to filter User_associations to delete.
     * @example
     * // Delete a few User_associations
     * const { count } = await prisma.user_associations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_associationsDeleteManyArgs>(
      args?: SelectSubset<T, user_associationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_associations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_associationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_associations
     * const user_associations = await prisma.user_associations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_associationsUpdateManyArgs>(
      args: SelectSubset<T, user_associationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_associations.
     * @param {user_associationsUpsertArgs} args - Arguments to update or create a User_associations.
     * @example
     * // Update or create a User_associations
     * const user_associations = await prisma.user_associations.upsert({
     *   create: {
     *     // ... data to create a User_associations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_associations we want to update
     *   }
     * })
    **/
    upsert<T extends user_associationsUpsertArgs>(
      args: SelectSubset<T, user_associationsUpsertArgs>
    ): CheckSelect<T, Prisma__user_associationsClient<user_associations>, Prisma__user_associationsClient<user_associationsGetPayload<T>>>

    /**
     * Find one User_associations that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {user_associationsFindUniqueOrThrowArgs} args - Arguments to find a User_associations
     * @example
     * // Get one User_associations
     * const user_associations = await prisma.user_associations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_associationsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_associationsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__user_associationsClient<user_associations>, Prisma__user_associationsClient<user_associationsGetPayload<T>>>

    /**
     * Find the first User_associations that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_associationsFindFirstOrThrowArgs} args - Arguments to find a User_associations
     * @example
     * // Get one User_associations
     * const user_associations = await prisma.user_associations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_associationsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_associationsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__user_associationsClient<user_associations>, Prisma__user_associationsClient<user_associationsGetPayload<T>>>

    /**
     * Count the number of User_associations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_associationsCountArgs} args - Arguments to filter User_associations to count.
     * @example
     * // Count the number of User_associations
     * const count = await prisma.user_associations.count({
     *   where: {
     *     // ... the filter for the User_associations we want to count
     *   }
     * })
    **/
    count<T extends user_associationsCountArgs>(
      args?: Subset<T, user_associationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_associationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_associations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_associationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_associationsAggregateArgs>(args: Subset<T, User_associationsAggregateArgs>): PrismaPromise<GetUser_associationsAggregateType<T>>

    /**
     * Group by User_associations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_associationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_associationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_associationsGroupByArgs['orderBy'] }
        : { orderBy?: User_associationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_associationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_associationsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user_associations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_associationsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    associations<T extends associationsArgs = {}>(args?: Subset<T, associationsArgs>): CheckSelect<T, Prisma__associationsClient<associations | Null>, Prisma__associationsClient<associationsGetPayload<T> | Null>>;

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user_associations base type for findUnique actions
   */
  export type user_associationsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_associations
     * 
    **/
    select?: user_associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_associationsInclude | null
    /**
     * Filter, which user_associations to fetch.
     * 
    **/
    where: user_associationsWhereUniqueInput
  }

  /**
   * user_associations: findUnique
   */
  export interface user_associationsFindUniqueArgs extends user_associationsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_associations base type for findFirst actions
   */
  export type user_associationsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_associations
     * 
    **/
    select?: user_associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_associationsInclude | null
    /**
     * Filter, which user_associations to fetch.
     * 
    **/
    where?: user_associationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_associations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_associationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_associations.
     * 
    **/
    cursor?: user_associationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_associations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_associations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_associations.
     * 
    **/
    distinct?: Enumerable<User_associationsScalarFieldEnum>
  }

  /**
   * user_associations: findFirst
   */
  export interface user_associationsFindFirstArgs extends user_associationsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_associations findMany
   */
  export type user_associationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_associations
     * 
    **/
    select?: user_associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_associationsInclude | null
    /**
     * Filter, which user_associations to fetch.
     * 
    **/
    where?: user_associationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_associations to fetch.
     * 
    **/
    orderBy?: Enumerable<user_associationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_associations.
     * 
    **/
    cursor?: user_associationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_associations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_associations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_associationsScalarFieldEnum>
  }


  /**
   * user_associations create
   */
  export type user_associationsCreateArgs = {
    /**
     * Select specific fields to fetch from the user_associations
     * 
    **/
    select?: user_associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_associationsInclude | null
    /**
     * The data needed to create a user_associations.
     * 
    **/
    data: XOR<user_associationsCreateInput, user_associationsUncheckedCreateInput>
  }


  /**
   * user_associations createMany
   */
  export type user_associationsCreateManyArgs = {
    /**
     * The data used to create many user_associations.
     * 
    **/
    data: Enumerable<user_associationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_associations update
   */
  export type user_associationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_associations
     * 
    **/
    select?: user_associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_associationsInclude | null
    /**
     * The data needed to update a user_associations.
     * 
    **/
    data: XOR<user_associationsUpdateInput, user_associationsUncheckedUpdateInput>
    /**
     * Choose, which user_associations to update.
     * 
    **/
    where: user_associationsWhereUniqueInput
  }


  /**
   * user_associations updateMany
   */
  export type user_associationsUpdateManyArgs = {
    /**
     * The data used to update user_associations.
     * 
    **/
    data: XOR<user_associationsUpdateManyMutationInput, user_associationsUncheckedUpdateManyInput>
    /**
     * Filter which user_associations to update
     * 
    **/
    where?: user_associationsWhereInput
  }


  /**
   * user_associations upsert
   */
  export type user_associationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_associations
     * 
    **/
    select?: user_associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_associationsInclude | null
    /**
     * The filter to search for the user_associations to update in case it exists.
     * 
    **/
    where: user_associationsWhereUniqueInput
    /**
     * In case the user_associations found by the `where` argument doesn't exist, create a new user_associations with this data.
     * 
    **/
    create: XOR<user_associationsCreateInput, user_associationsUncheckedCreateInput>
    /**
     * In case the user_associations was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_associationsUpdateInput, user_associationsUncheckedUpdateInput>
  }


  /**
   * user_associations delete
   */
  export type user_associationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_associations
     * 
    **/
    select?: user_associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_associationsInclude | null
    /**
     * Filter which user_associations to delete.
     * 
    **/
    where: user_associationsWhereUniqueInput
  }


  /**
   * user_associations deleteMany
   */
  export type user_associationsDeleteManyArgs = {
    /**
     * Filter which user_associations to delete
     * 
    **/
    where?: user_associationsWhereInput
  }


  /**
   * user_associations: findUniqueOrThrow
   */
  export type user_associationsFindUniqueOrThrowArgs = user_associationsFindUniqueArgsBase
      

  /**
   * user_associations: findFirstOrThrow
   */
  export type user_associationsFindFirstOrThrowArgs = user_associationsFindFirstArgsBase
      

  /**
   * user_associations without action
   */
  export type user_associationsArgs = {
    /**
     * Select specific fields to fetch from the user_associations
     * 
    **/
    select?: user_associationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_associationsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ActionScalarFieldEnum: {
    id: 'id',
    ville_depart: 'ville_depart',
    ville_arrive: 'ville_arrive',
    km: 'km',
    raisons: 'raisons',
    heure_depart: 'heure_depart',
    heure_arrivee: 'heure_arrivee',
    date: 'date',
    user_id: 'user_id',
    association_id: 'association_id',
    duree: 'duree',
    frais: 'frais',
    created_at: 'created_at',
    frais_kilometrique: 'frais_kilometrique',
    charges: 'charges',
    groupe: 'groupe',
    dons: 'dons',
    heures_valorisees: 'heures_valorisees',
    a_payer: 'a_payer'
  };

  export type ActionScalarFieldEnum = (typeof ActionScalarFieldEnum)[keyof typeof ActionScalarFieldEnum]


  export const AssociationsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    description: 'description',
    user_id: 'user_id',
    numero_siret: 'numero_siret',
    region: 'region'
  };

  export type AssociationsScalarFieldEnum = (typeof AssociationsScalarFieldEnum)[keyof typeof AssociationsScalarFieldEnum]


  export const Doctrine_migration_versionsScalarFieldEnum: {
    version: 'version',
    executed_at: 'executed_at',
    execution_time: 'execution_time'
  };

  export type Doctrine_migration_versionsScalarFieldEnum = (typeof Doctrine_migration_versionsScalarFieldEnum)[keyof typeof Doctrine_migration_versionsScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const Messenger_messagesScalarFieldEnum: {
    id: 'id',
    body: 'body',
    headers: 'headers',
    queue_name: 'queue_name',
    created_at: 'created_at',
    available_at: 'available_at',
    delivered_at: 'delivered_at'
  };

  export type Messenger_messagesScalarFieldEnum = (typeof Messenger_messagesScalarFieldEnum)[keyof typeof Messenger_messagesScalarFieldEnum]


  export const Reset_password_requestScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    selector: 'selector',
    hashed_token: 'hashed_token',
    requested_at: 'requested_at',
    expires_at: 'expires_at'
  };

  export type Reset_password_requestScalarFieldEnum = (typeof Reset_password_requestScalarFieldEnum)[keyof typeof Reset_password_requestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    roles: 'roles',
    password: 'password',
    email: 'email',
    profil_picture: 'profil_picture'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const User_associationsScalarFieldEnum: {
    user_id: 'user_id',
    associations_id: 'associations_id'
  };

  export type User_associationsScalarFieldEnum = (typeof User_associationsScalarFieldEnum)[keyof typeof User_associationsScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type actionWhereInput = {
    AND?: Enumerable<actionWhereInput>
    OR?: Enumerable<actionWhereInput>
    NOT?: Enumerable<actionWhereInput>
    id?: IntFilter | number
    ville_depart?: StringFilter | string
    ville_arrive?: StringFilter | string
    km?: IntFilter | number
    raisons?: StringFilter | string
    heure_depart?: DateTimeNullableFilter | Date | string | null
    heure_arrivee?: DateTimeNullableFilter | Date | string | null
    date?: DateTimeFilter | Date | string
    user_id?: IntFilter | number
    association_id?: IntNullableFilter | number | null
    duree?: StringNullableFilter | string | null
    frais?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    frais_kilometrique?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    charges?: StringFilter | string
    groupe?: StringFilter | string
    dons?: StringNullableFilter | string | null
    heures_valorisees?: StringNullableFilter | string | null
    a_payer?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, userWhereInput>
    associations?: XOR<AssociationsRelationFilter, associationsWhereInput> | null
  }

  export type actionOrderByWithRelationInput = {
    id?: SortOrder
    ville_depart?: SortOrder
    ville_arrive?: SortOrder
    km?: SortOrder
    raisons?: SortOrder
    heure_depart?: SortOrder
    heure_arrivee?: SortOrder
    date?: SortOrder
    user_id?: SortOrder
    association_id?: SortOrder
    duree?: SortOrder
    frais?: SortOrder
    created_at?: SortOrder
    frais_kilometrique?: SortOrder
    charges?: SortOrder
    groupe?: SortOrder
    dons?: SortOrder
    heures_valorisees?: SortOrder
    a_payer?: SortOrder
    user?: userOrderByWithRelationInput
    associations?: associationsOrderByWithRelationInput
  }

  export type actionWhereUniqueInput = {
    id?: number
  }

  export type actionOrderByWithAggregationInput = {
    id?: SortOrder
    ville_depart?: SortOrder
    ville_arrive?: SortOrder
    km?: SortOrder
    raisons?: SortOrder
    heure_depart?: SortOrder
    heure_arrivee?: SortOrder
    date?: SortOrder
    user_id?: SortOrder
    association_id?: SortOrder
    duree?: SortOrder
    frais?: SortOrder
    created_at?: SortOrder
    frais_kilometrique?: SortOrder
    charges?: SortOrder
    groupe?: SortOrder
    dons?: SortOrder
    heures_valorisees?: SortOrder
    a_payer?: SortOrder
    _count?: actionCountOrderByAggregateInput
    _avg?: actionAvgOrderByAggregateInput
    _max?: actionMaxOrderByAggregateInput
    _min?: actionMinOrderByAggregateInput
    _sum?: actionSumOrderByAggregateInput
  }

  export type actionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<actionScalarWhereWithAggregatesInput>
    OR?: Enumerable<actionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<actionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ville_depart?: StringWithAggregatesFilter | string
    ville_arrive?: StringWithAggregatesFilter | string
    km?: IntWithAggregatesFilter | number
    raisons?: StringWithAggregatesFilter | string
    heure_depart?: DateTimeNullableWithAggregatesFilter | Date | string | null
    heure_arrivee?: DateTimeNullableWithAggregatesFilter | Date | string | null
    date?: DateTimeWithAggregatesFilter | Date | string
    user_id?: IntWithAggregatesFilter | number
    association_id?: IntNullableWithAggregatesFilter | number | null
    duree?: StringNullableWithAggregatesFilter | string | null
    frais?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    frais_kilometrique?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    charges?: StringWithAggregatesFilter | string
    groupe?: StringWithAggregatesFilter | string
    dons?: StringNullableWithAggregatesFilter | string | null
    heures_valorisees?: StringNullableWithAggregatesFilter | string | null
    a_payer?: StringNullableWithAggregatesFilter | string | null
  }

  export type associationsWhereInput = {
    AND?: Enumerable<associationsWhereInput>
    OR?: Enumerable<associationsWhereInput>
    NOT?: Enumerable<associationsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    logo?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    user_id?: IntNullableFilter | number | null
    numero_siret?: StringFilter | string
    region?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, userWhereInput> | null
    action?: ActionListRelationFilter
    user_associations?: User_associationsListRelationFilter
  }

  export type associationsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
    numero_siret?: SortOrder
    region?: SortOrder
    user?: userOrderByWithRelationInput
    action?: actionOrderByRelationAggregateInput
    user_associations?: user_associationsOrderByRelationAggregateInput
  }

  export type associationsWhereUniqueInput = {
    id?: number
  }

  export type associationsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
    numero_siret?: SortOrder
    region?: SortOrder
    _count?: associationsCountOrderByAggregateInput
    _avg?: associationsAvgOrderByAggregateInput
    _max?: associationsMaxOrderByAggregateInput
    _min?: associationsMinOrderByAggregateInput
    _sum?: associationsSumOrderByAggregateInput
  }

  export type associationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<associationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<associationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<associationsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    logo?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    user_id?: IntNullableWithAggregatesFilter | number | null
    numero_siret?: StringWithAggregatesFilter | string
    region?: StringNullableWithAggregatesFilter | string | null
  }

  export type doctrine_migration_versionsWhereInput = {
    AND?: Enumerable<doctrine_migration_versionsWhereInput>
    OR?: Enumerable<doctrine_migration_versionsWhereInput>
    NOT?: Enumerable<doctrine_migration_versionsWhereInput>
    version?: StringFilter | string
    executed_at?: DateTimeNullableFilter | Date | string | null
    execution_time?: IntNullableFilter | number | null
  }

  export type doctrine_migration_versionsOrderByWithRelationInput = {
    version?: SortOrder
    executed_at?: SortOrder
    execution_time?: SortOrder
  }

  export type doctrine_migration_versionsWhereUniqueInput = {
    version?: string
  }

  export type doctrine_migration_versionsOrderByWithAggregationInput = {
    version?: SortOrder
    executed_at?: SortOrder
    execution_time?: SortOrder
    _count?: doctrine_migration_versionsCountOrderByAggregateInput
    _avg?: doctrine_migration_versionsAvgOrderByAggregateInput
    _max?: doctrine_migration_versionsMaxOrderByAggregateInput
    _min?: doctrine_migration_versionsMinOrderByAggregateInput
    _sum?: doctrine_migration_versionsSumOrderByAggregateInput
  }

  export type doctrine_migration_versionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<doctrine_migration_versionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<doctrine_migration_versionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<doctrine_migration_versionsScalarWhereWithAggregatesInput>
    version?: StringWithAggregatesFilter | string
    executed_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    execution_time?: IntNullableWithAggregatesFilter | number | null
  }

  export type messenger_messagesWhereInput = {
    AND?: Enumerable<messenger_messagesWhereInput>
    OR?: Enumerable<messenger_messagesWhereInput>
    NOT?: Enumerable<messenger_messagesWhereInput>
    id?: BigIntFilter | bigint | number
    body?: StringFilter | string
    headers?: StringFilter | string
    queue_name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    available_at?: DateTimeFilter | Date | string
    delivered_at?: DateTimeNullableFilter | Date | string | null
  }

  export type messenger_messagesOrderByWithRelationInput = {
    id?: SortOrder
    body?: SortOrder
    headers?: SortOrder
    queue_name?: SortOrder
    created_at?: SortOrder
    available_at?: SortOrder
    delivered_at?: SortOrder
  }

  export type messenger_messagesWhereUniqueInput = {
    id?: bigint | number
  }

  export type messenger_messagesOrderByWithAggregationInput = {
    id?: SortOrder
    body?: SortOrder
    headers?: SortOrder
    queue_name?: SortOrder
    created_at?: SortOrder
    available_at?: SortOrder
    delivered_at?: SortOrder
    _count?: messenger_messagesCountOrderByAggregateInput
    _avg?: messenger_messagesAvgOrderByAggregateInput
    _max?: messenger_messagesMaxOrderByAggregateInput
    _min?: messenger_messagesMinOrderByAggregateInput
    _sum?: messenger_messagesSumOrderByAggregateInput
  }

  export type messenger_messagesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<messenger_messagesScalarWhereWithAggregatesInput>
    OR?: Enumerable<messenger_messagesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<messenger_messagesScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    body?: StringWithAggregatesFilter | string
    headers?: StringWithAggregatesFilter | string
    queue_name?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    available_at?: DateTimeWithAggregatesFilter | Date | string
    delivered_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type reset_password_requestWhereInput = {
    AND?: Enumerable<reset_password_requestWhereInput>
    OR?: Enumerable<reset_password_requestWhereInput>
    NOT?: Enumerable<reset_password_requestWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    selector?: StringFilter | string
    hashed_token?: StringFilter | string
    requested_at?: DateTimeFilter | Date | string
    expires_at?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type reset_password_requestOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    selector?: SortOrder
    hashed_token?: SortOrder
    requested_at?: SortOrder
    expires_at?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type reset_password_requestWhereUniqueInput = {
    id?: number
  }

  export type reset_password_requestOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    selector?: SortOrder
    hashed_token?: SortOrder
    requested_at?: SortOrder
    expires_at?: SortOrder
    _count?: reset_password_requestCountOrderByAggregateInput
    _avg?: reset_password_requestAvgOrderByAggregateInput
    _max?: reset_password_requestMaxOrderByAggregateInput
    _min?: reset_password_requestMinOrderByAggregateInput
    _sum?: reset_password_requestSumOrderByAggregateInput
  }

  export type reset_password_requestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<reset_password_requestScalarWhereWithAggregatesInput>
    OR?: Enumerable<reset_password_requestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<reset_password_requestScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    selector?: StringWithAggregatesFilter | string
    hashed_token?: StringWithAggregatesFilter | string
    requested_at?: DateTimeWithAggregatesFilter | Date | string
    expires_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    roles?: JsonFilter
    password?: StringFilter | string
    email?: StringNullableFilter | string | null
    profil_picture?: StringNullableFilter | string | null
    action?: ActionListRelationFilter
    associations?: AssociationsListRelationFilter
    reset_password_request?: Reset_password_requestListRelationFilter
    user_associations?: User_associationsListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    roles?: SortOrder
    password?: SortOrder
    email?: SortOrder
    profil_picture?: SortOrder
    action?: actionOrderByRelationAggregateInput
    associations?: associationsOrderByRelationAggregateInput
    reset_password_request?: reset_password_requestOrderByRelationAggregateInput
    user_associations?: user_associationsOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    roles?: SortOrder
    password?: SortOrder
    email?: SortOrder
    profil_picture?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    roles?: JsonWithAggregatesFilter
    password?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    profil_picture?: StringNullableWithAggregatesFilter | string | null
  }

  export type user_associationsWhereInput = {
    AND?: Enumerable<user_associationsWhereInput>
    OR?: Enumerable<user_associationsWhereInput>
    NOT?: Enumerable<user_associationsWhereInput>
    user_id?: IntFilter | number
    associations_id?: IntFilter | number
    associations?: XOR<AssociationsRelationFilter, associationsWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
  }

  export type user_associationsOrderByWithRelationInput = {
    user_id?: SortOrder
    associations_id?: SortOrder
    associations?: associationsOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type user_associationsWhereUniqueInput = {
    user_id_associations_id?: user_associationsUser_idAssociations_idCompoundUniqueInput
  }

  export type user_associationsOrderByWithAggregationInput = {
    user_id?: SortOrder
    associations_id?: SortOrder
    _count?: user_associationsCountOrderByAggregateInput
    _avg?: user_associationsAvgOrderByAggregateInput
    _max?: user_associationsMaxOrderByAggregateInput
    _min?: user_associationsMinOrderByAggregateInput
    _sum?: user_associationsSumOrderByAggregateInput
  }

  export type user_associationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_associationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_associationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_associationsScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    associations_id?: IntWithAggregatesFilter | number
  }

  export type actionCreateInput = {
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
    user: userCreateNestedOneWithoutActionInput
    associations?: associationsCreateNestedOneWithoutActionInput
  }

  export type actionUncheckedCreateInput = {
    id?: number
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    user_id: number
    association_id?: number | null
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
  }

  export type actionUpdateInput = {
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutActionNestedInput
    associations?: associationsUpdateOneWithoutActionNestedInput
  }

  export type actionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    association_id?: NullableIntFieldUpdateOperationsInput | number | null
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type actionCreateManyInput = {
    id?: number
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    user_id: number
    association_id?: number | null
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
  }

  export type actionUpdateManyMutationInput = {
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type actionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    association_id?: NullableIntFieldUpdateOperationsInput | number | null
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type associationsCreateInput = {
    name: string
    logo?: string | null
    description?: string | null
    numero_siret: string
    region?: string | null
    user?: userCreateNestedOneWithoutAssociationsInput
    action?: actionCreateNestedManyWithoutAssociationsInput
    user_associations?: user_associationsCreateNestedManyWithoutAssociationsInput
  }

  export type associationsUncheckedCreateInput = {
    id?: number
    name: string
    logo?: string | null
    description?: string | null
    user_id?: number | null
    numero_siret: string
    region?: string | null
    action?: actionUncheckedCreateNestedManyWithoutAssociationsInput
    user_associations?: user_associationsUncheckedCreateNestedManyWithoutAssociationsInput
  }

  export type associationsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutAssociationsNestedInput
    action?: actionUpdateManyWithoutAssociationsNestedInput
    user_associations?: user_associationsUpdateManyWithoutAssociationsNestedInput
  }

  export type associationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUncheckedUpdateManyWithoutAssociationsNestedInput
    user_associations?: user_associationsUncheckedUpdateManyWithoutAssociationsNestedInput
  }

  export type associationsCreateManyInput = {
    id?: number
    name: string
    logo?: string | null
    description?: string | null
    user_id?: number | null
    numero_siret: string
    region?: string | null
  }

  export type associationsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type associationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type doctrine_migration_versionsCreateInput = {
    version: string
    executed_at?: Date | string | null
    execution_time?: number | null
  }

  export type doctrine_migration_versionsUncheckedCreateInput = {
    version: string
    executed_at?: Date | string | null
    execution_time?: number | null
  }

  export type doctrine_migration_versionsUpdateInput = {
    version?: StringFieldUpdateOperationsInput | string
    executed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    execution_time?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type doctrine_migration_versionsUncheckedUpdateInput = {
    version?: StringFieldUpdateOperationsInput | string
    executed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    execution_time?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type doctrine_migration_versionsCreateManyInput = {
    version: string
    executed_at?: Date | string | null
    execution_time?: number | null
  }

  export type doctrine_migration_versionsUpdateManyMutationInput = {
    version?: StringFieldUpdateOperationsInput | string
    executed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    execution_time?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type doctrine_migration_versionsUncheckedUpdateManyInput = {
    version?: StringFieldUpdateOperationsInput | string
    executed_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    execution_time?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type messenger_messagesCreateInput = {
    id?: bigint | number
    body: string
    headers: string
    queue_name: string
    created_at: Date | string
    available_at: Date | string
    delivered_at?: Date | string | null
  }

  export type messenger_messagesUncheckedCreateInput = {
    id?: bigint | number
    body: string
    headers: string
    queue_name: string
    created_at: Date | string
    available_at: Date | string
    delivered_at?: Date | string | null
  }

  export type messenger_messagesUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    body?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    queue_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    available_at?: DateTimeFieldUpdateOperationsInput | Date | string
    delivered_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messenger_messagesUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    body?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    queue_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    available_at?: DateTimeFieldUpdateOperationsInput | Date | string
    delivered_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messenger_messagesCreateManyInput = {
    id?: bigint | number
    body: string
    headers: string
    queue_name: string
    created_at: Date | string
    available_at: Date | string
    delivered_at?: Date | string | null
  }

  export type messenger_messagesUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    body?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    queue_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    available_at?: DateTimeFieldUpdateOperationsInput | Date | string
    delivered_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type messenger_messagesUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    body?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    queue_name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    available_at?: DateTimeFieldUpdateOperationsInput | Date | string
    delivered_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type reset_password_requestCreateInput = {
    selector: string
    hashed_token: string
    requested_at: Date | string
    expires_at: Date | string
    user: userCreateNestedOneWithoutReset_password_requestInput
  }

  export type reset_password_requestUncheckedCreateInput = {
    id?: number
    user_id: number
    selector: string
    hashed_token: string
    requested_at: Date | string
    expires_at: Date | string
  }

  export type reset_password_requestUpdateInput = {
    selector?: StringFieldUpdateOperationsInput | string
    hashed_token?: StringFieldUpdateOperationsInput | string
    requested_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutReset_password_requestNestedInput
  }

  export type reset_password_requestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    selector?: StringFieldUpdateOperationsInput | string
    hashed_token?: StringFieldUpdateOperationsInput | string
    requested_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reset_password_requestCreateManyInput = {
    id?: number
    user_id: number
    selector: string
    hashed_token: string
    requested_at: Date | string
    expires_at: Date | string
  }

  export type reset_password_requestUpdateManyMutationInput = {
    selector?: StringFieldUpdateOperationsInput | string
    hashed_token?: StringFieldUpdateOperationsInput | string
    requested_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reset_password_requestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    selector?: StringFieldUpdateOperationsInput | string
    hashed_token?: StringFieldUpdateOperationsInput | string
    requested_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateInput = {
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    action?: actionCreateNestedManyWithoutUserInput
    associations?: associationsCreateNestedManyWithoutUserInput
    reset_password_request?: reset_password_requestCreateNestedManyWithoutUserInput
    user_associations?: user_associationsCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    action?: actionUncheckedCreateNestedManyWithoutUserInput
    associations?: associationsUncheckedCreateNestedManyWithoutUserInput
    reset_password_request?: reset_password_requestUncheckedCreateNestedManyWithoutUserInput
    user_associations?: user_associationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUpdateManyWithoutUserNestedInput
    associations?: associationsUpdateManyWithoutUserNestedInput
    reset_password_request?: reset_password_requestUpdateManyWithoutUserNestedInput
    user_associations?: user_associationsUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUncheckedUpdateManyWithoutUserNestedInput
    associations?: associationsUncheckedUpdateManyWithoutUserNestedInput
    reset_password_request?: reset_password_requestUncheckedUpdateManyWithoutUserNestedInput
    user_associations?: user_associationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
  }

  export type userUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_associationsCreateInput = {
    associations: associationsCreateNestedOneWithoutUser_associationsInput
    user: userCreateNestedOneWithoutUser_associationsInput
  }

  export type user_associationsUncheckedCreateInput = {
    user_id: number
    associations_id: number
  }

  export type user_associationsUpdateInput = {
    associations?: associationsUpdateOneRequiredWithoutUser_associationsNestedInput
    user?: userUpdateOneRequiredWithoutUser_associationsNestedInput
  }

  export type user_associationsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    associations_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_associationsCreateManyInput = {
    user_id: number
    associations_id: number
  }

  export type user_associationsUpdateManyMutationInput = {

  }

  export type user_associationsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    associations_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type UserRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type AssociationsRelationFilter = {
    is?: associationsWhereInput
    isNot?: associationsWhereInput
  }

  export type actionCountOrderByAggregateInput = {
    id?: SortOrder
    ville_depart?: SortOrder
    ville_arrive?: SortOrder
    km?: SortOrder
    raisons?: SortOrder
    heure_depart?: SortOrder
    heure_arrivee?: SortOrder
    date?: SortOrder
    user_id?: SortOrder
    association_id?: SortOrder
    duree?: SortOrder
    frais?: SortOrder
    created_at?: SortOrder
    frais_kilometrique?: SortOrder
    charges?: SortOrder
    groupe?: SortOrder
    dons?: SortOrder
    heures_valorisees?: SortOrder
    a_payer?: SortOrder
  }

  export type actionAvgOrderByAggregateInput = {
    id?: SortOrder
    km?: SortOrder
    user_id?: SortOrder
    association_id?: SortOrder
    frais?: SortOrder
    frais_kilometrique?: SortOrder
  }

  export type actionMaxOrderByAggregateInput = {
    id?: SortOrder
    ville_depart?: SortOrder
    ville_arrive?: SortOrder
    km?: SortOrder
    raisons?: SortOrder
    heure_depart?: SortOrder
    heure_arrivee?: SortOrder
    date?: SortOrder
    user_id?: SortOrder
    association_id?: SortOrder
    duree?: SortOrder
    frais?: SortOrder
    created_at?: SortOrder
    frais_kilometrique?: SortOrder
    charges?: SortOrder
    groupe?: SortOrder
    dons?: SortOrder
    heures_valorisees?: SortOrder
    a_payer?: SortOrder
  }

  export type actionMinOrderByAggregateInput = {
    id?: SortOrder
    ville_depart?: SortOrder
    ville_arrive?: SortOrder
    km?: SortOrder
    raisons?: SortOrder
    heure_depart?: SortOrder
    heure_arrivee?: SortOrder
    date?: SortOrder
    user_id?: SortOrder
    association_id?: SortOrder
    duree?: SortOrder
    frais?: SortOrder
    created_at?: SortOrder
    frais_kilometrique?: SortOrder
    charges?: SortOrder
    groupe?: SortOrder
    dons?: SortOrder
    heures_valorisees?: SortOrder
    a_payer?: SortOrder
  }

  export type actionSumOrderByAggregateInput = {
    id?: SortOrder
    km?: SortOrder
    user_id?: SortOrder
    association_id?: SortOrder
    frais?: SortOrder
    frais_kilometrique?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type ActionListRelationFilter = {
    every?: actionWhereInput
    some?: actionWhereInput
    none?: actionWhereInput
  }

  export type User_associationsListRelationFilter = {
    every?: user_associationsWhereInput
    some?: user_associationsWhereInput
    none?: user_associationsWhereInput
  }

  export type actionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_associationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type associationsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
    numero_siret?: SortOrder
    region?: SortOrder
  }

  export type associationsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type associationsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
    numero_siret?: SortOrder
    region?: SortOrder
  }

  export type associationsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    description?: SortOrder
    user_id?: SortOrder
    numero_siret?: SortOrder
    region?: SortOrder
  }

  export type associationsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type doctrine_migration_versionsCountOrderByAggregateInput = {
    version?: SortOrder
    executed_at?: SortOrder
    execution_time?: SortOrder
  }

  export type doctrine_migration_versionsAvgOrderByAggregateInput = {
    execution_time?: SortOrder
  }

  export type doctrine_migration_versionsMaxOrderByAggregateInput = {
    version?: SortOrder
    executed_at?: SortOrder
    execution_time?: SortOrder
  }

  export type doctrine_migration_versionsMinOrderByAggregateInput = {
    version?: SortOrder
    executed_at?: SortOrder
    execution_time?: SortOrder
  }

  export type doctrine_migration_versionsSumOrderByAggregateInput = {
    execution_time?: SortOrder
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type messenger_messagesCountOrderByAggregateInput = {
    id?: SortOrder
    body?: SortOrder
    headers?: SortOrder
    queue_name?: SortOrder
    created_at?: SortOrder
    available_at?: SortOrder
    delivered_at?: SortOrder
  }

  export type messenger_messagesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type messenger_messagesMaxOrderByAggregateInput = {
    id?: SortOrder
    body?: SortOrder
    headers?: SortOrder
    queue_name?: SortOrder
    created_at?: SortOrder
    available_at?: SortOrder
    delivered_at?: SortOrder
  }

  export type messenger_messagesMinOrderByAggregateInput = {
    id?: SortOrder
    body?: SortOrder
    headers?: SortOrder
    queue_name?: SortOrder
    created_at?: SortOrder
    available_at?: SortOrder
    delivered_at?: SortOrder
  }

  export type messenger_messagesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type reset_password_requestCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    selector?: SortOrder
    hashed_token?: SortOrder
    requested_at?: SortOrder
    expires_at?: SortOrder
  }

  export type reset_password_requestAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type reset_password_requestMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    selector?: SortOrder
    hashed_token?: SortOrder
    requested_at?: SortOrder
    expires_at?: SortOrder
  }

  export type reset_password_requestMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    selector?: SortOrder
    hashed_token?: SortOrder
    requested_at?: SortOrder
    expires_at?: SortOrder
  }

  export type reset_password_requestSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type AssociationsListRelationFilter = {
    every?: associationsWhereInput
    some?: associationsWhereInput
    none?: associationsWhereInput
  }

  export type Reset_password_requestListRelationFilter = {
    every?: reset_password_requestWhereInput
    some?: reset_password_requestWhereInput
    none?: reset_password_requestWhereInput
  }

  export type associationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reset_password_requestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    roles?: SortOrder
    password?: SortOrder
    email?: SortOrder
    profil_picture?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    profil_picture?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    profil_picture?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type user_associationsUser_idAssociations_idCompoundUniqueInput = {
    user_id: number
    associations_id: number
  }

  export type user_associationsCountOrderByAggregateInput = {
    user_id?: SortOrder
    associations_id?: SortOrder
  }

  export type user_associationsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    associations_id?: SortOrder
  }

  export type user_associationsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    associations_id?: SortOrder
  }

  export type user_associationsMinOrderByAggregateInput = {
    user_id?: SortOrder
    associations_id?: SortOrder
  }

  export type user_associationsSumOrderByAggregateInput = {
    user_id?: SortOrder
    associations_id?: SortOrder
  }

  export type userCreateNestedOneWithoutActionInput = {
    create?: XOR<userCreateWithoutActionInput, userUncheckedCreateWithoutActionInput>
    connectOrCreate?: userCreateOrConnectWithoutActionInput
    connect?: userWhereUniqueInput
  }

  export type associationsCreateNestedOneWithoutActionInput = {
    create?: XOR<associationsCreateWithoutActionInput, associationsUncheckedCreateWithoutActionInput>
    connectOrCreate?: associationsCreateOrConnectWithoutActionInput
    connect?: associationsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type userUpdateOneRequiredWithoutActionNestedInput = {
    create?: XOR<userCreateWithoutActionInput, userUncheckedCreateWithoutActionInput>
    connectOrCreate?: userCreateOrConnectWithoutActionInput
    upsert?: userUpsertWithoutActionInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutActionInput, userUncheckedUpdateWithoutActionInput>
  }

  export type associationsUpdateOneWithoutActionNestedInput = {
    create?: XOR<associationsCreateWithoutActionInput, associationsUncheckedCreateWithoutActionInput>
    connectOrCreate?: associationsCreateOrConnectWithoutActionInput
    upsert?: associationsUpsertWithoutActionInput
    disconnect?: boolean
    delete?: boolean
    connect?: associationsWhereUniqueInput
    update?: XOR<associationsUpdateWithoutActionInput, associationsUncheckedUpdateWithoutActionInput>
  }

  export type userCreateNestedOneWithoutAssociationsInput = {
    create?: XOR<userCreateWithoutAssociationsInput, userUncheckedCreateWithoutAssociationsInput>
    connectOrCreate?: userCreateOrConnectWithoutAssociationsInput
    connect?: userWhereUniqueInput
  }

  export type actionCreateNestedManyWithoutAssociationsInput = {
    create?: XOR<Enumerable<actionCreateWithoutAssociationsInput>, Enumerable<actionUncheckedCreateWithoutAssociationsInput>>
    connectOrCreate?: Enumerable<actionCreateOrConnectWithoutAssociationsInput>
    createMany?: actionCreateManyAssociationsInputEnvelope
    connect?: Enumerable<actionWhereUniqueInput>
  }

  export type user_associationsCreateNestedManyWithoutAssociationsInput = {
    create?: XOR<Enumerable<user_associationsCreateWithoutAssociationsInput>, Enumerable<user_associationsUncheckedCreateWithoutAssociationsInput>>
    connectOrCreate?: Enumerable<user_associationsCreateOrConnectWithoutAssociationsInput>
    createMany?: user_associationsCreateManyAssociationsInputEnvelope
    connect?: Enumerable<user_associationsWhereUniqueInput>
  }

  export type actionUncheckedCreateNestedManyWithoutAssociationsInput = {
    create?: XOR<Enumerable<actionCreateWithoutAssociationsInput>, Enumerable<actionUncheckedCreateWithoutAssociationsInput>>
    connectOrCreate?: Enumerable<actionCreateOrConnectWithoutAssociationsInput>
    createMany?: actionCreateManyAssociationsInputEnvelope
    connect?: Enumerable<actionWhereUniqueInput>
  }

  export type user_associationsUncheckedCreateNestedManyWithoutAssociationsInput = {
    create?: XOR<Enumerable<user_associationsCreateWithoutAssociationsInput>, Enumerable<user_associationsUncheckedCreateWithoutAssociationsInput>>
    connectOrCreate?: Enumerable<user_associationsCreateOrConnectWithoutAssociationsInput>
    createMany?: user_associationsCreateManyAssociationsInputEnvelope
    connect?: Enumerable<user_associationsWhereUniqueInput>
  }

  export type userUpdateOneWithoutAssociationsNestedInput = {
    create?: XOR<userCreateWithoutAssociationsInput, userUncheckedCreateWithoutAssociationsInput>
    connectOrCreate?: userCreateOrConnectWithoutAssociationsInput
    upsert?: userUpsertWithoutAssociationsInput
    disconnect?: boolean
    delete?: boolean
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutAssociationsInput, userUncheckedUpdateWithoutAssociationsInput>
  }

  export type actionUpdateManyWithoutAssociationsNestedInput = {
    create?: XOR<Enumerable<actionCreateWithoutAssociationsInput>, Enumerable<actionUncheckedCreateWithoutAssociationsInput>>
    connectOrCreate?: Enumerable<actionCreateOrConnectWithoutAssociationsInput>
    upsert?: Enumerable<actionUpsertWithWhereUniqueWithoutAssociationsInput>
    createMany?: actionCreateManyAssociationsInputEnvelope
    set?: Enumerable<actionWhereUniqueInput>
    disconnect?: Enumerable<actionWhereUniqueInput>
    delete?: Enumerable<actionWhereUniqueInput>
    connect?: Enumerable<actionWhereUniqueInput>
    update?: Enumerable<actionUpdateWithWhereUniqueWithoutAssociationsInput>
    updateMany?: Enumerable<actionUpdateManyWithWhereWithoutAssociationsInput>
    deleteMany?: Enumerable<actionScalarWhereInput>
  }

  export type user_associationsUpdateManyWithoutAssociationsNestedInput = {
    create?: XOR<Enumerable<user_associationsCreateWithoutAssociationsInput>, Enumerable<user_associationsUncheckedCreateWithoutAssociationsInput>>
    connectOrCreate?: Enumerable<user_associationsCreateOrConnectWithoutAssociationsInput>
    upsert?: Enumerable<user_associationsUpsertWithWhereUniqueWithoutAssociationsInput>
    createMany?: user_associationsCreateManyAssociationsInputEnvelope
    set?: Enumerable<user_associationsWhereUniqueInput>
    disconnect?: Enumerable<user_associationsWhereUniqueInput>
    delete?: Enumerable<user_associationsWhereUniqueInput>
    connect?: Enumerable<user_associationsWhereUniqueInput>
    update?: Enumerable<user_associationsUpdateWithWhereUniqueWithoutAssociationsInput>
    updateMany?: Enumerable<user_associationsUpdateManyWithWhereWithoutAssociationsInput>
    deleteMany?: Enumerable<user_associationsScalarWhereInput>
  }

  export type actionUncheckedUpdateManyWithoutAssociationsNestedInput = {
    create?: XOR<Enumerable<actionCreateWithoutAssociationsInput>, Enumerable<actionUncheckedCreateWithoutAssociationsInput>>
    connectOrCreate?: Enumerable<actionCreateOrConnectWithoutAssociationsInput>
    upsert?: Enumerable<actionUpsertWithWhereUniqueWithoutAssociationsInput>
    createMany?: actionCreateManyAssociationsInputEnvelope
    set?: Enumerable<actionWhereUniqueInput>
    disconnect?: Enumerable<actionWhereUniqueInput>
    delete?: Enumerable<actionWhereUniqueInput>
    connect?: Enumerable<actionWhereUniqueInput>
    update?: Enumerable<actionUpdateWithWhereUniqueWithoutAssociationsInput>
    updateMany?: Enumerable<actionUpdateManyWithWhereWithoutAssociationsInput>
    deleteMany?: Enumerable<actionScalarWhereInput>
  }

  export type user_associationsUncheckedUpdateManyWithoutAssociationsNestedInput = {
    create?: XOR<Enumerable<user_associationsCreateWithoutAssociationsInput>, Enumerable<user_associationsUncheckedCreateWithoutAssociationsInput>>
    connectOrCreate?: Enumerable<user_associationsCreateOrConnectWithoutAssociationsInput>
    upsert?: Enumerable<user_associationsUpsertWithWhereUniqueWithoutAssociationsInput>
    createMany?: user_associationsCreateManyAssociationsInputEnvelope
    set?: Enumerable<user_associationsWhereUniqueInput>
    disconnect?: Enumerable<user_associationsWhereUniqueInput>
    delete?: Enumerable<user_associationsWhereUniqueInput>
    connect?: Enumerable<user_associationsWhereUniqueInput>
    update?: Enumerable<user_associationsUpdateWithWhereUniqueWithoutAssociationsInput>
    updateMany?: Enumerable<user_associationsUpdateManyWithWhereWithoutAssociationsInput>
    deleteMany?: Enumerable<user_associationsScalarWhereInput>
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type userCreateNestedOneWithoutReset_password_requestInput = {
    create?: XOR<userCreateWithoutReset_password_requestInput, userUncheckedCreateWithoutReset_password_requestInput>
    connectOrCreate?: userCreateOrConnectWithoutReset_password_requestInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutReset_password_requestNestedInput = {
    create?: XOR<userCreateWithoutReset_password_requestInput, userUncheckedCreateWithoutReset_password_requestInput>
    connectOrCreate?: userCreateOrConnectWithoutReset_password_requestInput
    upsert?: userUpsertWithoutReset_password_requestInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutReset_password_requestInput, userUncheckedUpdateWithoutReset_password_requestInput>
  }

  export type actionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<actionCreateWithoutUserInput>, Enumerable<actionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<actionCreateOrConnectWithoutUserInput>
    createMany?: actionCreateManyUserInputEnvelope
    connect?: Enumerable<actionWhereUniqueInput>
  }

  export type associationsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<associationsCreateWithoutUserInput>, Enumerable<associationsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<associationsCreateOrConnectWithoutUserInput>
    createMany?: associationsCreateManyUserInputEnvelope
    connect?: Enumerable<associationsWhereUniqueInput>
  }

  export type reset_password_requestCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<reset_password_requestCreateWithoutUserInput>, Enumerable<reset_password_requestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<reset_password_requestCreateOrConnectWithoutUserInput>
    createMany?: reset_password_requestCreateManyUserInputEnvelope
    connect?: Enumerable<reset_password_requestWhereUniqueInput>
  }

  export type user_associationsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_associationsCreateWithoutUserInput>, Enumerable<user_associationsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_associationsCreateOrConnectWithoutUserInput>
    createMany?: user_associationsCreateManyUserInputEnvelope
    connect?: Enumerable<user_associationsWhereUniqueInput>
  }

  export type actionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<actionCreateWithoutUserInput>, Enumerable<actionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<actionCreateOrConnectWithoutUserInput>
    createMany?: actionCreateManyUserInputEnvelope
    connect?: Enumerable<actionWhereUniqueInput>
  }

  export type associationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<associationsCreateWithoutUserInput>, Enumerable<associationsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<associationsCreateOrConnectWithoutUserInput>
    createMany?: associationsCreateManyUserInputEnvelope
    connect?: Enumerable<associationsWhereUniqueInput>
  }

  export type reset_password_requestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<reset_password_requestCreateWithoutUserInput>, Enumerable<reset_password_requestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<reset_password_requestCreateOrConnectWithoutUserInput>
    createMany?: reset_password_requestCreateManyUserInputEnvelope
    connect?: Enumerable<reset_password_requestWhereUniqueInput>
  }

  export type user_associationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_associationsCreateWithoutUserInput>, Enumerable<user_associationsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_associationsCreateOrConnectWithoutUserInput>
    createMany?: user_associationsCreateManyUserInputEnvelope
    connect?: Enumerable<user_associationsWhereUniqueInput>
  }

  export type actionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<actionCreateWithoutUserInput>, Enumerable<actionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<actionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<actionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: actionCreateManyUserInputEnvelope
    set?: Enumerable<actionWhereUniqueInput>
    disconnect?: Enumerable<actionWhereUniqueInput>
    delete?: Enumerable<actionWhereUniqueInput>
    connect?: Enumerable<actionWhereUniqueInput>
    update?: Enumerable<actionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<actionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<actionScalarWhereInput>
  }

  export type associationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<associationsCreateWithoutUserInput>, Enumerable<associationsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<associationsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<associationsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: associationsCreateManyUserInputEnvelope
    set?: Enumerable<associationsWhereUniqueInput>
    disconnect?: Enumerable<associationsWhereUniqueInput>
    delete?: Enumerable<associationsWhereUniqueInput>
    connect?: Enumerable<associationsWhereUniqueInput>
    update?: Enumerable<associationsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<associationsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<associationsScalarWhereInput>
  }

  export type reset_password_requestUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<reset_password_requestCreateWithoutUserInput>, Enumerable<reset_password_requestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<reset_password_requestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<reset_password_requestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: reset_password_requestCreateManyUserInputEnvelope
    set?: Enumerable<reset_password_requestWhereUniqueInput>
    disconnect?: Enumerable<reset_password_requestWhereUniqueInput>
    delete?: Enumerable<reset_password_requestWhereUniqueInput>
    connect?: Enumerable<reset_password_requestWhereUniqueInput>
    update?: Enumerable<reset_password_requestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<reset_password_requestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<reset_password_requestScalarWhereInput>
  }

  export type user_associationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<user_associationsCreateWithoutUserInput>, Enumerable<user_associationsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_associationsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_associationsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_associationsCreateManyUserInputEnvelope
    set?: Enumerable<user_associationsWhereUniqueInput>
    disconnect?: Enumerable<user_associationsWhereUniqueInput>
    delete?: Enumerable<user_associationsWhereUniqueInput>
    connect?: Enumerable<user_associationsWhereUniqueInput>
    update?: Enumerable<user_associationsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_associationsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_associationsScalarWhereInput>
  }

  export type actionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<actionCreateWithoutUserInput>, Enumerable<actionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<actionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<actionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: actionCreateManyUserInputEnvelope
    set?: Enumerable<actionWhereUniqueInput>
    disconnect?: Enumerable<actionWhereUniqueInput>
    delete?: Enumerable<actionWhereUniqueInput>
    connect?: Enumerable<actionWhereUniqueInput>
    update?: Enumerable<actionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<actionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<actionScalarWhereInput>
  }

  export type associationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<associationsCreateWithoutUserInput>, Enumerable<associationsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<associationsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<associationsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: associationsCreateManyUserInputEnvelope
    set?: Enumerable<associationsWhereUniqueInput>
    disconnect?: Enumerable<associationsWhereUniqueInput>
    delete?: Enumerable<associationsWhereUniqueInput>
    connect?: Enumerable<associationsWhereUniqueInput>
    update?: Enumerable<associationsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<associationsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<associationsScalarWhereInput>
  }

  export type reset_password_requestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<reset_password_requestCreateWithoutUserInput>, Enumerable<reset_password_requestUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<reset_password_requestCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<reset_password_requestUpsertWithWhereUniqueWithoutUserInput>
    createMany?: reset_password_requestCreateManyUserInputEnvelope
    set?: Enumerable<reset_password_requestWhereUniqueInput>
    disconnect?: Enumerable<reset_password_requestWhereUniqueInput>
    delete?: Enumerable<reset_password_requestWhereUniqueInput>
    connect?: Enumerable<reset_password_requestWhereUniqueInput>
    update?: Enumerable<reset_password_requestUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<reset_password_requestUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<reset_password_requestScalarWhereInput>
  }

  export type user_associationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<user_associationsCreateWithoutUserInput>, Enumerable<user_associationsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_associationsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_associationsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_associationsCreateManyUserInputEnvelope
    set?: Enumerable<user_associationsWhereUniqueInput>
    disconnect?: Enumerable<user_associationsWhereUniqueInput>
    delete?: Enumerable<user_associationsWhereUniqueInput>
    connect?: Enumerable<user_associationsWhereUniqueInput>
    update?: Enumerable<user_associationsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_associationsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_associationsScalarWhereInput>
  }

  export type associationsCreateNestedOneWithoutUser_associationsInput = {
    create?: XOR<associationsCreateWithoutUser_associationsInput, associationsUncheckedCreateWithoutUser_associationsInput>
    connectOrCreate?: associationsCreateOrConnectWithoutUser_associationsInput
    connect?: associationsWhereUniqueInput
  }

  export type userCreateNestedOneWithoutUser_associationsInput = {
    create?: XOR<userCreateWithoutUser_associationsInput, userUncheckedCreateWithoutUser_associationsInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_associationsInput
    connect?: userWhereUniqueInput
  }

  export type associationsUpdateOneRequiredWithoutUser_associationsNestedInput = {
    create?: XOR<associationsCreateWithoutUser_associationsInput, associationsUncheckedCreateWithoutUser_associationsInput>
    connectOrCreate?: associationsCreateOrConnectWithoutUser_associationsInput
    upsert?: associationsUpsertWithoutUser_associationsInput
    connect?: associationsWhereUniqueInput
    update?: XOR<associationsUpdateWithoutUser_associationsInput, associationsUncheckedUpdateWithoutUser_associationsInput>
  }

  export type userUpdateOneRequiredWithoutUser_associationsNestedInput = {
    create?: XOR<userCreateWithoutUser_associationsInput, userUncheckedCreateWithoutUser_associationsInput>
    connectOrCreate?: userCreateOrConnectWithoutUser_associationsInput
    upsert?: userUpsertWithoutUser_associationsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutUser_associationsInput, userUncheckedUpdateWithoutUser_associationsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type userCreateWithoutActionInput = {
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    associations?: associationsCreateNestedManyWithoutUserInput
    reset_password_request?: reset_password_requestCreateNestedManyWithoutUserInput
    user_associations?: user_associationsCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutActionInput = {
    id?: number
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    associations?: associationsUncheckedCreateNestedManyWithoutUserInput
    reset_password_request?: reset_password_requestUncheckedCreateNestedManyWithoutUserInput
    user_associations?: user_associationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutActionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutActionInput, userUncheckedCreateWithoutActionInput>
  }

  export type associationsCreateWithoutActionInput = {
    name: string
    logo?: string | null
    description?: string | null
    numero_siret: string
    region?: string | null
    user?: userCreateNestedOneWithoutAssociationsInput
    user_associations?: user_associationsCreateNestedManyWithoutAssociationsInput
  }

  export type associationsUncheckedCreateWithoutActionInput = {
    id?: number
    name: string
    logo?: string | null
    description?: string | null
    user_id?: number | null
    numero_siret: string
    region?: string | null
    user_associations?: user_associationsUncheckedCreateNestedManyWithoutAssociationsInput
  }

  export type associationsCreateOrConnectWithoutActionInput = {
    where: associationsWhereUniqueInput
    create: XOR<associationsCreateWithoutActionInput, associationsUncheckedCreateWithoutActionInput>
  }

  export type userUpsertWithoutActionInput = {
    update: XOR<userUpdateWithoutActionInput, userUncheckedUpdateWithoutActionInput>
    create: XOR<userCreateWithoutActionInput, userUncheckedCreateWithoutActionInput>
  }

  export type userUpdateWithoutActionInput = {
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    associations?: associationsUpdateManyWithoutUserNestedInput
    reset_password_request?: reset_password_requestUpdateManyWithoutUserNestedInput
    user_associations?: user_associationsUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutActionInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    associations?: associationsUncheckedUpdateManyWithoutUserNestedInput
    reset_password_request?: reset_password_requestUncheckedUpdateManyWithoutUserNestedInput
    user_associations?: user_associationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type associationsUpsertWithoutActionInput = {
    update: XOR<associationsUpdateWithoutActionInput, associationsUncheckedUpdateWithoutActionInput>
    create: XOR<associationsCreateWithoutActionInput, associationsUncheckedCreateWithoutActionInput>
  }

  export type associationsUpdateWithoutActionInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutAssociationsNestedInput
    user_associations?: user_associationsUpdateManyWithoutAssociationsNestedInput
  }

  export type associationsUncheckedUpdateWithoutActionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    user_associations?: user_associationsUncheckedUpdateManyWithoutAssociationsNestedInput
  }

  export type userCreateWithoutAssociationsInput = {
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    action?: actionCreateNestedManyWithoutUserInput
    reset_password_request?: reset_password_requestCreateNestedManyWithoutUserInput
    user_associations?: user_associationsCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutAssociationsInput = {
    id?: number
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    action?: actionUncheckedCreateNestedManyWithoutUserInput
    reset_password_request?: reset_password_requestUncheckedCreateNestedManyWithoutUserInput
    user_associations?: user_associationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutAssociationsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAssociationsInput, userUncheckedCreateWithoutAssociationsInput>
  }

  export type actionCreateWithoutAssociationsInput = {
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
    user: userCreateNestedOneWithoutActionInput
  }

  export type actionUncheckedCreateWithoutAssociationsInput = {
    id?: number
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    user_id: number
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
  }

  export type actionCreateOrConnectWithoutAssociationsInput = {
    where: actionWhereUniqueInput
    create: XOR<actionCreateWithoutAssociationsInput, actionUncheckedCreateWithoutAssociationsInput>
  }

  export type actionCreateManyAssociationsInputEnvelope = {
    data: Enumerable<actionCreateManyAssociationsInput>
    skipDuplicates?: boolean
  }

  export type user_associationsCreateWithoutAssociationsInput = {
    user: userCreateNestedOneWithoutUser_associationsInput
  }

  export type user_associationsUncheckedCreateWithoutAssociationsInput = {
    user_id: number
  }

  export type user_associationsCreateOrConnectWithoutAssociationsInput = {
    where: user_associationsWhereUniqueInput
    create: XOR<user_associationsCreateWithoutAssociationsInput, user_associationsUncheckedCreateWithoutAssociationsInput>
  }

  export type user_associationsCreateManyAssociationsInputEnvelope = {
    data: Enumerable<user_associationsCreateManyAssociationsInput>
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutAssociationsInput = {
    update: XOR<userUpdateWithoutAssociationsInput, userUncheckedUpdateWithoutAssociationsInput>
    create: XOR<userCreateWithoutAssociationsInput, userUncheckedCreateWithoutAssociationsInput>
  }

  export type userUpdateWithoutAssociationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUpdateManyWithoutUserNestedInput
    reset_password_request?: reset_password_requestUpdateManyWithoutUserNestedInput
    user_associations?: user_associationsUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutAssociationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUncheckedUpdateManyWithoutUserNestedInput
    reset_password_request?: reset_password_requestUncheckedUpdateManyWithoutUserNestedInput
    user_associations?: user_associationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type actionUpsertWithWhereUniqueWithoutAssociationsInput = {
    where: actionWhereUniqueInput
    update: XOR<actionUpdateWithoutAssociationsInput, actionUncheckedUpdateWithoutAssociationsInput>
    create: XOR<actionCreateWithoutAssociationsInput, actionUncheckedCreateWithoutAssociationsInput>
  }

  export type actionUpdateWithWhereUniqueWithoutAssociationsInput = {
    where: actionWhereUniqueInput
    data: XOR<actionUpdateWithoutAssociationsInput, actionUncheckedUpdateWithoutAssociationsInput>
  }

  export type actionUpdateManyWithWhereWithoutAssociationsInput = {
    where: actionScalarWhereInput
    data: XOR<actionUpdateManyMutationInput, actionUncheckedUpdateManyWithoutActionInput>
  }

  export type actionScalarWhereInput = {
    AND?: Enumerable<actionScalarWhereInput>
    OR?: Enumerable<actionScalarWhereInput>
    NOT?: Enumerable<actionScalarWhereInput>
    id?: IntFilter | number
    ville_depart?: StringFilter | string
    ville_arrive?: StringFilter | string
    km?: IntFilter | number
    raisons?: StringFilter | string
    heure_depart?: DateTimeNullableFilter | Date | string | null
    heure_arrivee?: DateTimeNullableFilter | Date | string | null
    date?: DateTimeFilter | Date | string
    user_id?: IntFilter | number
    association_id?: IntNullableFilter | number | null
    duree?: StringNullableFilter | string | null
    frais?: IntNullableFilter | number | null
    created_at?: DateTimeNullableFilter | Date | string | null
    frais_kilometrique?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    charges?: StringFilter | string
    groupe?: StringFilter | string
    dons?: StringNullableFilter | string | null
    heures_valorisees?: StringNullableFilter | string | null
    a_payer?: StringNullableFilter | string | null
  }

  export type user_associationsUpsertWithWhereUniqueWithoutAssociationsInput = {
    where: user_associationsWhereUniqueInput
    update: XOR<user_associationsUpdateWithoutAssociationsInput, user_associationsUncheckedUpdateWithoutAssociationsInput>
    create: XOR<user_associationsCreateWithoutAssociationsInput, user_associationsUncheckedCreateWithoutAssociationsInput>
  }

  export type user_associationsUpdateWithWhereUniqueWithoutAssociationsInput = {
    where: user_associationsWhereUniqueInput
    data: XOR<user_associationsUpdateWithoutAssociationsInput, user_associationsUncheckedUpdateWithoutAssociationsInput>
  }

  export type user_associationsUpdateManyWithWhereWithoutAssociationsInput = {
    where: user_associationsScalarWhereInput
    data: XOR<user_associationsUpdateManyMutationInput, user_associationsUncheckedUpdateManyWithoutUser_associationsInput>
  }

  export type user_associationsScalarWhereInput = {
    AND?: Enumerable<user_associationsScalarWhereInput>
    OR?: Enumerable<user_associationsScalarWhereInput>
    NOT?: Enumerable<user_associationsScalarWhereInput>
    user_id?: IntFilter | number
    associations_id?: IntFilter | number
  }

  export type userCreateWithoutReset_password_requestInput = {
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    action?: actionCreateNestedManyWithoutUserInput
    associations?: associationsCreateNestedManyWithoutUserInput
    user_associations?: user_associationsCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutReset_password_requestInput = {
    id?: number
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    action?: actionUncheckedCreateNestedManyWithoutUserInput
    associations?: associationsUncheckedCreateNestedManyWithoutUserInput
    user_associations?: user_associationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutReset_password_requestInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutReset_password_requestInput, userUncheckedCreateWithoutReset_password_requestInput>
  }

  export type userUpsertWithoutReset_password_requestInput = {
    update: XOR<userUpdateWithoutReset_password_requestInput, userUncheckedUpdateWithoutReset_password_requestInput>
    create: XOR<userCreateWithoutReset_password_requestInput, userUncheckedCreateWithoutReset_password_requestInput>
  }

  export type userUpdateWithoutReset_password_requestInput = {
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUpdateManyWithoutUserNestedInput
    associations?: associationsUpdateManyWithoutUserNestedInput
    user_associations?: user_associationsUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutReset_password_requestInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUncheckedUpdateManyWithoutUserNestedInput
    associations?: associationsUncheckedUpdateManyWithoutUserNestedInput
    user_associations?: user_associationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type actionCreateWithoutUserInput = {
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
    associations?: associationsCreateNestedOneWithoutActionInput
  }

  export type actionUncheckedCreateWithoutUserInput = {
    id?: number
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    association_id?: number | null
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
  }

  export type actionCreateOrConnectWithoutUserInput = {
    where: actionWhereUniqueInput
    create: XOR<actionCreateWithoutUserInput, actionUncheckedCreateWithoutUserInput>
  }

  export type actionCreateManyUserInputEnvelope = {
    data: Enumerable<actionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type associationsCreateWithoutUserInput = {
    name: string
    logo?: string | null
    description?: string | null
    numero_siret: string
    region?: string | null
    action?: actionCreateNestedManyWithoutAssociationsInput
    user_associations?: user_associationsCreateNestedManyWithoutAssociationsInput
  }

  export type associationsUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    logo?: string | null
    description?: string | null
    numero_siret: string
    region?: string | null
    action?: actionUncheckedCreateNestedManyWithoutAssociationsInput
    user_associations?: user_associationsUncheckedCreateNestedManyWithoutAssociationsInput
  }

  export type associationsCreateOrConnectWithoutUserInput = {
    where: associationsWhereUniqueInput
    create: XOR<associationsCreateWithoutUserInput, associationsUncheckedCreateWithoutUserInput>
  }

  export type associationsCreateManyUserInputEnvelope = {
    data: Enumerable<associationsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type reset_password_requestCreateWithoutUserInput = {
    selector: string
    hashed_token: string
    requested_at: Date | string
    expires_at: Date | string
  }

  export type reset_password_requestUncheckedCreateWithoutUserInput = {
    id?: number
    selector: string
    hashed_token: string
    requested_at: Date | string
    expires_at: Date | string
  }

  export type reset_password_requestCreateOrConnectWithoutUserInput = {
    where: reset_password_requestWhereUniqueInput
    create: XOR<reset_password_requestCreateWithoutUserInput, reset_password_requestUncheckedCreateWithoutUserInput>
  }

  export type reset_password_requestCreateManyUserInputEnvelope = {
    data: Enumerable<reset_password_requestCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type user_associationsCreateWithoutUserInput = {
    associations: associationsCreateNestedOneWithoutUser_associationsInput
  }

  export type user_associationsUncheckedCreateWithoutUserInput = {
    associations_id: number
  }

  export type user_associationsCreateOrConnectWithoutUserInput = {
    where: user_associationsWhereUniqueInput
    create: XOR<user_associationsCreateWithoutUserInput, user_associationsUncheckedCreateWithoutUserInput>
  }

  export type user_associationsCreateManyUserInputEnvelope = {
    data: Enumerable<user_associationsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type actionUpsertWithWhereUniqueWithoutUserInput = {
    where: actionWhereUniqueInput
    update: XOR<actionUpdateWithoutUserInput, actionUncheckedUpdateWithoutUserInput>
    create: XOR<actionCreateWithoutUserInput, actionUncheckedCreateWithoutUserInput>
  }

  export type actionUpdateWithWhereUniqueWithoutUserInput = {
    where: actionWhereUniqueInput
    data: XOR<actionUpdateWithoutUserInput, actionUncheckedUpdateWithoutUserInput>
  }

  export type actionUpdateManyWithWhereWithoutUserInput = {
    where: actionScalarWhereInput
    data: XOR<actionUpdateManyMutationInput, actionUncheckedUpdateManyWithoutActionInput>
  }

  export type associationsUpsertWithWhereUniqueWithoutUserInput = {
    where: associationsWhereUniqueInput
    update: XOR<associationsUpdateWithoutUserInput, associationsUncheckedUpdateWithoutUserInput>
    create: XOR<associationsCreateWithoutUserInput, associationsUncheckedCreateWithoutUserInput>
  }

  export type associationsUpdateWithWhereUniqueWithoutUserInput = {
    where: associationsWhereUniqueInput
    data: XOR<associationsUpdateWithoutUserInput, associationsUncheckedUpdateWithoutUserInput>
  }

  export type associationsUpdateManyWithWhereWithoutUserInput = {
    where: associationsScalarWhereInput
    data: XOR<associationsUpdateManyMutationInput, associationsUncheckedUpdateManyWithoutAssociationsInput>
  }

  export type associationsScalarWhereInput = {
    AND?: Enumerable<associationsScalarWhereInput>
    OR?: Enumerable<associationsScalarWhereInput>
    NOT?: Enumerable<associationsScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    logo?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    user_id?: IntNullableFilter | number | null
    numero_siret?: StringFilter | string
    region?: StringNullableFilter | string | null
  }

  export type reset_password_requestUpsertWithWhereUniqueWithoutUserInput = {
    where: reset_password_requestWhereUniqueInput
    update: XOR<reset_password_requestUpdateWithoutUserInput, reset_password_requestUncheckedUpdateWithoutUserInput>
    create: XOR<reset_password_requestCreateWithoutUserInput, reset_password_requestUncheckedCreateWithoutUserInput>
  }

  export type reset_password_requestUpdateWithWhereUniqueWithoutUserInput = {
    where: reset_password_requestWhereUniqueInput
    data: XOR<reset_password_requestUpdateWithoutUserInput, reset_password_requestUncheckedUpdateWithoutUserInput>
  }

  export type reset_password_requestUpdateManyWithWhereWithoutUserInput = {
    where: reset_password_requestScalarWhereInput
    data: XOR<reset_password_requestUpdateManyMutationInput, reset_password_requestUncheckedUpdateManyWithoutReset_password_requestInput>
  }

  export type reset_password_requestScalarWhereInput = {
    AND?: Enumerable<reset_password_requestScalarWhereInput>
    OR?: Enumerable<reset_password_requestScalarWhereInput>
    NOT?: Enumerable<reset_password_requestScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    selector?: StringFilter | string
    hashed_token?: StringFilter | string
    requested_at?: DateTimeFilter | Date | string
    expires_at?: DateTimeFilter | Date | string
  }

  export type user_associationsUpsertWithWhereUniqueWithoutUserInput = {
    where: user_associationsWhereUniqueInput
    update: XOR<user_associationsUpdateWithoutUserInput, user_associationsUncheckedUpdateWithoutUserInput>
    create: XOR<user_associationsCreateWithoutUserInput, user_associationsUncheckedCreateWithoutUserInput>
  }

  export type user_associationsUpdateWithWhereUniqueWithoutUserInput = {
    where: user_associationsWhereUniqueInput
    data: XOR<user_associationsUpdateWithoutUserInput, user_associationsUncheckedUpdateWithoutUserInput>
  }

  export type user_associationsUpdateManyWithWhereWithoutUserInput = {
    where: user_associationsScalarWhereInput
    data: XOR<user_associationsUpdateManyMutationInput, user_associationsUncheckedUpdateManyWithoutUser_associationsInput>
  }

  export type associationsCreateWithoutUser_associationsInput = {
    name: string
    logo?: string | null
    description?: string | null
    numero_siret: string
    region?: string | null
    user?: userCreateNestedOneWithoutAssociationsInput
    action?: actionCreateNestedManyWithoutAssociationsInput
  }

  export type associationsUncheckedCreateWithoutUser_associationsInput = {
    id?: number
    name: string
    logo?: string | null
    description?: string | null
    user_id?: number | null
    numero_siret: string
    region?: string | null
    action?: actionUncheckedCreateNestedManyWithoutAssociationsInput
  }

  export type associationsCreateOrConnectWithoutUser_associationsInput = {
    where: associationsWhereUniqueInput
    create: XOR<associationsCreateWithoutUser_associationsInput, associationsUncheckedCreateWithoutUser_associationsInput>
  }

  export type userCreateWithoutUser_associationsInput = {
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    action?: actionCreateNestedManyWithoutUserInput
    associations?: associationsCreateNestedManyWithoutUserInput
    reset_password_request?: reset_password_requestCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutUser_associationsInput = {
    id?: number
    username: string
    roles: JsonNullValueInput | InputJsonValue
    password: string
    email?: string | null
    profil_picture?: string | null
    action?: actionUncheckedCreateNestedManyWithoutUserInput
    associations?: associationsUncheckedCreateNestedManyWithoutUserInput
    reset_password_request?: reset_password_requestUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutUser_associationsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutUser_associationsInput, userUncheckedCreateWithoutUser_associationsInput>
  }

  export type associationsUpsertWithoutUser_associationsInput = {
    update: XOR<associationsUpdateWithoutUser_associationsInput, associationsUncheckedUpdateWithoutUser_associationsInput>
    create: XOR<associationsCreateWithoutUser_associationsInput, associationsUncheckedCreateWithoutUser_associationsInput>
  }

  export type associationsUpdateWithoutUser_associationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneWithoutAssociationsNestedInput
    action?: actionUpdateManyWithoutAssociationsNestedInput
  }

  export type associationsUncheckedUpdateWithoutUser_associationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUncheckedUpdateManyWithoutAssociationsNestedInput
  }

  export type userUpsertWithoutUser_associationsInput = {
    update: XOR<userUpdateWithoutUser_associationsInput, userUncheckedUpdateWithoutUser_associationsInput>
    create: XOR<userCreateWithoutUser_associationsInput, userUncheckedCreateWithoutUser_associationsInput>
  }

  export type userUpdateWithoutUser_associationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUpdateManyWithoutUserNestedInput
    associations?: associationsUpdateManyWithoutUserNestedInput
    reset_password_request?: reset_password_requestUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutUser_associationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    roles?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    profil_picture?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUncheckedUpdateManyWithoutUserNestedInput
    associations?: associationsUncheckedUpdateManyWithoutUserNestedInput
    reset_password_request?: reset_password_requestUncheckedUpdateManyWithoutUserNestedInput
  }

  export type actionCreateManyAssociationsInput = {
    id?: number
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    user_id: number
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
  }

  export type user_associationsCreateManyAssociationsInput = {
    user_id: number
  }

  export type actionUpdateWithoutAssociationsInput = {
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutActionNestedInput
  }

  export type actionUncheckedUpdateWithoutAssociationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type actionUncheckedUpdateManyWithoutActionInput = {
    id?: IntFieldUpdateOperationsInput | number
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_associationsUpdateWithoutAssociationsInput = {
    user?: userUpdateOneRequiredWithoutUser_associationsNestedInput
  }

  export type user_associationsUncheckedUpdateWithoutAssociationsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_associationsUncheckedUpdateManyWithoutUser_associationsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type actionCreateManyUserInput = {
    id?: number
    ville_depart: string
    ville_arrive: string
    km: number
    raisons: string
    heure_depart?: Date | string | null
    heure_arrivee?: Date | string | null
    date: Date | string
    association_id?: number | null
    duree?: string | null
    frais?: number | null
    created_at?: Date | string | null
    frais_kilometrique?: Decimal | DecimalJsLike | number | string | null
    charges: string
    groupe: string
    dons?: string | null
    heures_valorisees?: string | null
    a_payer?: string | null
  }

  export type associationsCreateManyUserInput = {
    id?: number
    name: string
    logo?: string | null
    description?: string | null
    numero_siret: string
    region?: string | null
  }

  export type reset_password_requestCreateManyUserInput = {
    id?: number
    selector: string
    hashed_token: string
    requested_at: Date | string
    expires_at: Date | string
  }

  export type user_associationsCreateManyUserInput = {
    associations_id: number
  }

  export type actionUpdateWithoutUserInput = {
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
    associations?: associationsUpdateOneWithoutActionNestedInput
  }

  export type actionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ville_depart?: StringFieldUpdateOperationsInput | string
    ville_arrive?: StringFieldUpdateOperationsInput | string
    km?: IntFieldUpdateOperationsInput | number
    raisons?: StringFieldUpdateOperationsInput | string
    heure_depart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heure_arrivee?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    association_id?: NullableIntFieldUpdateOperationsInput | number | null
    duree?: NullableStringFieldUpdateOperationsInput | string | null
    frais?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frais_kilometrique?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    charges?: StringFieldUpdateOperationsInput | string
    groupe?: StringFieldUpdateOperationsInput | string
    dons?: NullableStringFieldUpdateOperationsInput | string | null
    heures_valorisees?: NullableStringFieldUpdateOperationsInput | string | null
    a_payer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type associationsUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUpdateManyWithoutAssociationsNestedInput
    user_associations?: user_associationsUpdateManyWithoutAssociationsNestedInput
  }

  export type associationsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    action?: actionUncheckedUpdateManyWithoutAssociationsNestedInput
    user_associations?: user_associationsUncheckedUpdateManyWithoutAssociationsNestedInput
  }

  export type associationsUncheckedUpdateManyWithoutAssociationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    numero_siret?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reset_password_requestUpdateWithoutUserInput = {
    selector?: StringFieldUpdateOperationsInput | string
    hashed_token?: StringFieldUpdateOperationsInput | string
    requested_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reset_password_requestUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    selector?: StringFieldUpdateOperationsInput | string
    hashed_token?: StringFieldUpdateOperationsInput | string
    requested_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reset_password_requestUncheckedUpdateManyWithoutReset_password_requestInput = {
    id?: IntFieldUpdateOperationsInput | number
    selector?: StringFieldUpdateOperationsInput | string
    hashed_token?: StringFieldUpdateOperationsInput | string
    requested_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_associationsUpdateWithoutUserInput = {
    associations?: associationsUpdateOneRequiredWithoutUser_associationsNestedInput
  }

  export type user_associationsUncheckedUpdateWithoutUserInput = {
    associations_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}