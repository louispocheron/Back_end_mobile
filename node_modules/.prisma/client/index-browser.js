
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.5.0
 * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
 */
Prisma.prismaVersion = {
  client: "4.5.0",
  engine: "0362da9eebca54d94c8ef5edd3b2e90af99ba452"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ActionScalarFieldEnum = makeEnum({
  id: 'id',
  ville_depart: 'ville_depart',
  ville_arrive: 'ville_arrive',
  km: 'km',
  raisons: 'raisons',
  heure_depart: 'heure_depart',
  heure_arrivee: 'heure_arrivee',
  date: 'date',
  user_id: 'user_id',
  association_id: 'association_id',
  duree: 'duree',
  frais: 'frais',
  created_at: 'created_at',
  frais_kilometrique: 'frais_kilometrique',
  charges: 'charges',
  groupe: 'groupe',
  dons: 'dons',
  heures_valorisees: 'heures_valorisees',
  a_payer: 'a_payer'
});

exports.Prisma.AssociationsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  logo: 'logo',
  description: 'description',
  user_id: 'user_id',
  numero_siret: 'numero_siret',
  region: 'region'
});

exports.Prisma.Doctrine_migration_versionsScalarFieldEnum = makeEnum({
  version: 'version',
  executed_at: 'executed_at',
  execution_time: 'execution_time'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: Prisma.JsonNull
});

exports.Prisma.Messenger_messagesScalarFieldEnum = makeEnum({
  id: 'id',
  body: 'body',
  headers: 'headers',
  queue_name: 'queue_name',
  created_at: 'created_at',
  available_at: 'available_at',
  delivered_at: 'delivered_at'
});

exports.Prisma.Reset_password_requestScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  selector: 'selector',
  hashed_token: 'hashed_token',
  requested_at: 'requested_at',
  expires_at: 'expires_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  roles: 'roles',
  password: 'password',
  email: 'email',
  profil_picture: 'profil_picture'
});

exports.Prisma.User_associationsScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  associations_id: 'associations_id'
});


exports.Prisma.ModelName = makeEnum({
  action: 'action',
  associations: 'associations',
  doctrine_migration_versions: 'doctrine_migration_versions',
  messenger_messages: 'messenger_messages',
  reset_password_request: 'reset_password_request',
  user: 'user',
  user_associations: 'user_associations'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
